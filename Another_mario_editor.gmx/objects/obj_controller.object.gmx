<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AME controller

global.debug=0;
window_command_hook(window_command_close);
//window_set_background_redraw(true);

instance_create(mouse_x,mouse_y,obj_mousechek);

global.saved=0;


ViewXoffset=0;
ViewYoffset=0;

enum input {
   left, right, up, down, action0, action1, start
}

global.keyboard[input.left]=vk_left;
global.keyboard[input.right]=vk_right;
global.keyboard[input.up]=vk_up;
global.keyboard[input.down]=vk_down;
global.keyboard[input.action0]=vk_space;
global.keyboard[input.action1]=vk_shift;
global.keyboard[input.start]=vk_enter;

global.button[input.left]=gp_padl;
global.button[input.right]=gp_padr;
global.button[input.up]=gp_padu;
global.button[input.down]=gp_padd;
global.button[input.action0]=gp_face1;
global.button[input.action1]=gp_face3;
global.button[input.start]=gp_start;


Window_W=room_width;
Window_H=room_height;

Window_S=3;

vSync=0;

fullscreen=0;

application_surface_draw_enable(false);
surface_resize(application_surface,Window_W*5,Window_H*5);

event_user(0);

global.cursor=spr_cursor;
global.cursor_angle=0;


enum Attributes {
     Mushroom = 0,
     Wings = 1,
     Direction = 2,
     Parachute = 3,
     Width = 4,
     Height = 5
}

global.switchstate=0;


global.closing=0;
global.saved=1;
screensprite=-4;

//Discord
unix=unix_timestamp();
global.state="In";
global.details="doing";
global.icon="rpc_logo";
global.small_icon="";

global.icon_text="text";
global.small_icon_text="small text";

idling=60;

//Level save stuff
global.level_filename="";

global.level_index=0;
global.new_filename="Level";
onquestion=0;

msg_var=0;
ques_var=0;

global.getstring_cont="saveas";

fade_alpha=0;
fade=0;


global.number_font = font_add_sprite(spr_numbers_hud,ord("0"),false,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize enitity ids
/*
This one big script handles all of the entity data, sprites, tiles, names..
It'll be optimized in the future with a simple json file
*/

//Tileset used to get tiles
global.tileset=tiles_ground;


//Get enityty names
//Ds maps might get optimized as well with a json file
var file = file_text_open_read("Entity_list.txt");

var num = 0; 

while(!file_text_eoln(file)){

   entityname[num] = file_text_read_string(file);
   file_text_readln(file);
   show_debug_message("Read entity: "+entityname[num]);
   num++;
   
}
   
file_text_close(file);

global.entitymap=ds_map_create();

//ds_map_add(global.entitymap,"Semis",obj_semisolid);
//ds_map_add(global.entitymap,"Ground",obj_solid);//Still dunno how I'd handle walls
ds_map_add(global.entitymap,"Coin",obj_coin);
ds_map_add(global.entitymap,"MetalBlock",obj_metal_block);
ds_map_add(global.entitymap,"FlipBlock",obj_flipblock);
ds_map_add(global.entitymap,"QuestBlock",obj_question_block);
ds_map_add(global.entitymap,"InvBlock",obj_inv_block);
ds_map_add(global.entitymap,"Spiketrap",obj_spiketrap);
ds_map_add(global.entitymap,"OnOff_switch",obj_onoff_switch);
ds_map_add(global.entitymap,"OnOff_block_ON",obj_onoff_block_red);
ds_map_add(global.entitymap,"OnOff_block_OFF",obj_onoff_block_blue);
ds_map_add(global.entitymap,"Cloud",obj_cloud);
ds_map_add(global.entitymap,"Arrow",obj_arrow);
ds_map_add(global.entitymap,"Bridge",obj_bridge);
ds_map_add(global.entitymap,"Firebar",obj_firebar);
ds_map_add(global.entitymap,"Spring",obj_spring);

global.entityName=ds_map_create();

ds_map_add(global.entityName,"Coin","Coin");
ds_map_add(global.entityName,"Bridge","Bridge");
ds_map_add(global.entityName,"Arrow","Arrow");
ds_map_add(global.entityName,"MetalBlock","Metal block");
ds_map_add(global.entityName,"FlipBlock","Flip block");
ds_map_add(global.entityName,"QuestBlock","? block");
ds_map_add(global.entityName,"InvBlock","Invisible block");
ds_map_add(global.entityName,"Spiketrap","Spiketrap");
ds_map_add(global.entityName,"OnOff_switch","ON OFF switch");
ds_map_add(global.entityName,"OnOff_block_ON","ON block");
ds_map_add(global.entityName,"OnOff_block_OFF","OFF block");
ds_map_add(global.entityName,"Cloud","Cloud");
ds_map_add(global.entityName,"Firebar","Firebar");
ds_map_add(global.entityName,"Spring","Spring");

//Set tile positions
global.tileposX=ds_map_create();

ds_map_add(global.tileposX,"Coin",1);
ds_map_add(global.tileposX,"MetalBlock",18);
ds_map_add(global.tileposX,"FlipBlock",35);
ds_map_add(global.tileposX,"QuestBlock",52);
ds_map_add(global.tileposX,"InvBlock",69);
ds_map_add(global.tileposX,"Spiketrap",86);
ds_map_add(global.tileposX,"OnOff_switch",103);
ds_map_add(global.tileposX,"OnOff_block_ON",137);
ds_map_add(global.tileposX,"OnOff_block_OFF",188);
ds_map_add(global.tileposX,"Cloud",205);
ds_map_add(global.tileposX,"Firebar",239);
ds_map_add(global.tileposX,"Spring",52);


global.tileposY=ds_map_create();

ds_map_add(global.tileposY,"Coin",1);
ds_map_add(global.tileposY,"MetalBlock",1);
ds_map_add(global.tileposY,"FlipBlock",1);
ds_map_add(global.tileposY,"QuestBlock",1);
ds_map_add(global.tileposY,"InvBlock",1);
ds_map_add(global.tileposY,"Spiketrap",1);
ds_map_add(global.tileposY,"OnOff_switch",1);
ds_map_add(global.tileposY,"OnOff_block_ON",1);
ds_map_add(global.tileposY,"OnOff_block_OFF",1);
ds_map_add(global.tileposY,"Cloud",1);
ds_map_add(global.tileposY,"Firebar",1);
ds_map_add(global.tileposY,"Spring",18);

//Set sprites
/*
This is for the UI icons
*/
global.spritemap=ds_map_create();

//ds_map_add(global.spritemap,"Semis",spr_semisolid);
//ds_map_add(global.spritemap,"Ground",spr_terrain_icon);
ds_map_add(global.spritemap,"Coin",spr_coin);
ds_map_add(global.spritemap,"MetalBlock",spr_metal_block);
ds_map_add(global.spritemap,"FlipBlock",spr_flipblock);
ds_map_add(global.spritemap,"QuestBlock",spr_question_block);
ds_map_add(global.spritemap,"InvBlock",spr_invisible_block);
ds_map_add(global.spritemap,"Spiketrap",spr_spiketrap);
ds_map_add(global.spritemap,"OnOff_switch",spr_onoff_switch_on);
ds_map_add(global.spritemap,"OnOff_block_ON",spr_onoff_block_red);
ds_map_add(global.spritemap,"OnOff_block_OFF",spr_onoff_block_blue);
ds_map_add(global.spritemap,"Cloud",spr_cloud);
ds_map_add(global.spritemap,"Arrow",spr_arrow_icon);
ds_map_add(global.spritemap,"Bridge",spr_bridge_icon);
ds_map_add(global.spritemap,"Firebar",spr_firebar_block);
ds_map_add(global.spritemap,"Spring",spr_spring);

//Object type
global.entityclass=ds_map_create();



//ds_map_add(global.entityclass,"Semis",0);
//ds_map_add(global.entityclass,"Ground",0);

ds_map_add(global.entityclass,"MetalBlock",0);
ds_map_add(global.entityclass,"FlipBlock",0);
ds_map_add(global.entityclass,"QuestBlock",0);
ds_map_add(global.entityclass,"InvBlock",0);
ds_map_add(global.entityclass,"Spiketrap",0);
ds_map_add(global.entityclass,"Cloud",0);
ds_map_add(global.entityclass,"Bridge",0);

ds_map_add(global.entityclass,"Coin",1);

ds_map_add(global.entityclass,"OnOff_switch",3);
ds_map_add(global.entityclass,"OnOff_block_ON",3);
ds_map_add(global.entityclass,"OnOff_block_OFF",3);
ds_map_add(global.entityclass,"Arrow",3);
ds_map_add(global.entityclass,"Firebar",3);
ds_map_add(global.entityclass,"Spring",3);


//Entity list (the one in the top part of the editor HUD)
global.entity_list = ds_list_create();

for(var a=0; a&lt;12; a++){ global.selected_entity[a]="Coin"; ds_list_add(global.entity_list,"Coin"); }

ds_list_add(global.entity_list,"MetalBlock","FlipBlock","QuestBlock","InvBlock","Spiketrap","OnOff_switch",
"OnOff_block_ON","OnOff_block_OFF","Cloud","Arrow","Bridge","Spring");


//Load order from file
if(file_exists("Selected_entities.txt")){

var file = file_text_open_read("Selected_entities.txt");

var num = 0; 

while(!file_text_eoln(file)){

   ds_list_replace(global.entity_list,num,file_text_read_string(file));
   file_text_readln(file);
   show_debug_message("Put entity in list: "+entityname[num]);
   num++;
   
}

}

//Create the editor controller
alarm[3]=2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create editor controller
instance_create(0,0,obj_editor_controller);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(obj_entity_parent);
global.closing=0; 
onquestion=0;
global.level_numb=0;
event_user(2);
audio_stop_all();
room_goto(rm_levelselect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> with(obj_editor_controller){savebot_open=0;} 
global.draweditor=1;
global.closing=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller logic

//Get if we're trying to close the game
if (window_command_check(window_command_close)) { 

    show_debug_message("Close attempted"); 
   
 if(room==rm_editor){
    
   
   
   if(!global.saved){
   
    if(global.closing!=1){
      global.closing=1;
    }
      
   }else{
      game_end();
   } 
      
 }else if(room==rm_levelselect){ game_end(); }
    
    
}

//Discord RPC
//Rich presence setup
np_initdiscord("883736895568375829",0,0);

//Set time
np_setpresence_timestamps(unix,0,1);

//Set profile status
np_setpresence(global.state,global.details,global.icon,global.small_icon);

np_setpresence_more(global.small_icon_text,global.icon_text,0);

np_update();


if(idling&gt;=3600/2){ global.small_icon="rpc_idling"; }else{global.small_icon="rpc_logo"; }

//Set text
switch(global.icon){
        default: global.icon_text="Another Mario Editor"; break;
} 

switch(global.small_icon){
        default: global.small_icon_text=""; break;
        case "rpc_idling": global.small_icon_text="Idling"; break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_enter)){
   fullscreen=!fullscreen;
   event_user(0);
}

for(var a=0; a&lt;=5; a++){
   if(keyboard_check_pressed(ord(string(a)))){
      Window_S=a-1;
      event_user(0);
   }
}

if(keyboard_check_pressed(vk_f5)){
   game_end();
}

if(keyboard_check_pressed(ord("R"))){
   game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the name typed
var i_d = ds_map_find_value(async_load, "id");
 if i_d == msg_var
    {
    if ds_map_find_value(async_load, "status")
       {
       if ds_map_find_value(async_load, "result") != ""
          {
            var res=ds_map_find_value(async_load, "result");
            
            global.new_filename=res;
            
            global.closing=2;
            //Go through the saved levels and see if one is already called like it
            var file=file_find_first(working_directory + "\Levels\*.sav",fa_directory);
            
            while(file!=''){
            
                  if(global.new_filename+string(".sav")==file){
                  
                     global.closing=2;
                     show_debug_message("File with equal file name found");
                      with(obj_editor_controller){savebot_open=1;} 
                     break;
                  }
            
                  file=file_find_next();
            }
            
            if(!file_exists(working_directory + "\Levels\"+file)){
                
                
            
                event_user(1);}
            
            
          }
       }else{ show_debug_message("Closed typing window"); onquestion=0; }
       

    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load levels
global.level_numb=0;
global.levelname[60]="";

//Get level number
var levelfile=file_find_first(working_directory+"\Levels\*.sav",fa_directory);
var i=0;

while(levelfile!=''){

    global.level_numb++;
    global.levelname[i]=levelfile;
    show_debug_message("Found level "+string(global.levelname[i]));
    i++;
    levelfile=file_find_next();
    
}

show_debug_message("Found "+string(global.level_numb)+" levels");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save this file
if(global.getstring_cont=="saveas"){
    room_goto(rm_editor);
}

global.closing=2;
global.draweditor=0;
onquestion=0;
global.level_filename=global.new_filename+".sav";
with(obj_editor_controller){scr_save_level();}

alarm[1]=2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
display_set_gui_size(Window_W,Window_H);

display_reset(0,vSync);

window_set_size(Window_W*(Window_S+1),Window_H*(Window_S+1));

window_set_fullscreen(fullscreen);

alarm[0]=1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Went to room "+string(room_get_name(room)));
idling=0;
fade=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var file=file_text_open_write("Level list.dat");
   
    for(var a=0; a&lt;60; a++){
        file_text_write_string(file,string(global.levelname[a]));
        file_text_writeln(file);
    }

file_text_close(file);*/
 
  
    var file=file_text_open_write("Settings.dat");
   
   
   file_text_write_string(file,string(Window_S));
   file_text_writeln(file);

   file_text_write_string(file,string(vSync));
   file_text_writeln(file);

   file_text_write_string(file,string(fullscreen));
   file_text_writeln(file);
   
   
   file_text_close(file);
   
directory_destroy("Temp");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the number of levels saved
/*
A lot of the code was for a method that would not rely on how files are ordered by the computer
but I can't seem to figure it out rn
*/

global.level_numb=0;
global.levelname[60]="";

//Get level number
var levelfile=file_find_first(working_directory+"\Levels\*.sav",fa_directory);
var i=0;

while(levelfile!=''){

    global.level_numb++;
    global.levelname[i]=levelfile;
    show_debug_message("Found level "+string(global.levelname[i]));
    i++;
    levelfile=file_find_next();
    
}

show_debug_message("Found "+string(global.level_numb)+" levels");


/*if(file_exists("Level list.dat")){
  
   //Put the level names and images on a list based on the level list file 
   var file=file_text_open_read("Level list.dat");


   for(var a=0; a&lt;60; a++){
   
       var Fname=file_text_read_string(file);
         
       if(file_exists(working_directory+"\Levels\"+Fname)){
          global.levelname[a]=Fname;
          show_debug_message("Found level "+string(global.levelname[a]));
       
       
          if(file_exists(working_directory+"\Levels\Level images\"+
          string_delete(Fname,string_width(Fname)-3,4)+".png")){
         
             global.levelsprite[a]=sprite_add(working_directory+"\Levels\Level images\"+string_delete(Fname,string_width(Fname)-3,4)+".png",0,0,0,0,0);
             
             show_debug_message("Found image "+string(working_directory+"\Levels\Level images\"+string_delete(Fname,string_width(Fname)-3,4)+".png"));
       
          }
          else{
    
             global.levelsprite[a]=spr_nothumbnail; 
    
          }
       
       }
         
       file_text_readln(file);
   }   
     


   file_text_close(file);*/


/*var levelfile=file_find_first(working_directory+"\Levels\*.sav",fa_directory);
while(levelfile!=''){

     for(var a=0; a&lt;global.level_numb; a++){
         var Fname=file_text_read_string(file);
         
         if(Fname==levelfile){
            global.levelname[a]=levelfile;
            show_debug_message("Found level "+string(levelfile));  
            
            //Set image
            if(file_exists(working_directory+"\Levels\Level images\"+
            string_delete(levelfile,string_length(levelfile)-3,4)+".png")){
      
                   global.levelsprite[a]=sprite_add(working_directory+"\Levels\Level images\"+string_delete(levelfile,string_length(levelfile)-3,4)+".png",0,0,0,0,0);
    
            }else{
    
                   global.levelsprite[a]=spr_nothumbnail; 
    
            }
            
         }
         
         file_text_readln(file);
     }   
     levelfile=file_find_next();
}*/







//}

var levelfile=file_find_first(working_directory+"\Levels\*.sav",fa_directory);
var i=0;
while(levelfile!=''){

    if(room!=rm_init){
     if(sprite_exists(global.levelsprite[i])&amp;&amp;(global.levelsprite[i]!=spr_nothumbnail)){
       sprite_delete(global.levelsprite[i]);
     } 
    }

    if(file_exists(working_directory+"\Levels\Level images\"+
    string_delete(levelfile,string_length(levelfile)-3,4)+".png")){
      
      global.levelsprite[i]=sprite_add(working_directory+"\Levels\Level images\"+string_delete(levelfile,string_length(levelfile)-3,4)+".png",0,0,0,0,0);
    
    }else{
    
      global.levelsprite[i]=spr_nothumbnail; 
    
    }

    show_debug_message("Found image "+string(string_delete(levelfile,string_length(levelfile)-3,4)+".png"));
    levelfile=file_find_next();
    i++;
    
}


/*var levelfile=file_find_first(working_directory+"\Levels\*.sav",fa_directory);
for(var a=0; a&lt;3; a++){
   
     show_debug_message(levelfile);
     levelfile=file_find_next()
}*/





if(file_exists("Settings.dat")){
   
   var file=file_text_open_read("Settings.dat");
   
   
   Window_S=real(file_text_read_string(file));
   file_text_readln(file);

   vSyncreal=real(file_text_read_string(file));
   file_text_readln(file);

   fullscreen=real(file_text_read_string(file));
   file_text_readln(file);
   
   
   file_text_close(file);


}else{

  Window_S=3;

  vSync=0;

  fullscreen=0;

}



event_user(0);

room_goto(rm_levelselect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode_ext(bm_one, bm_inv_src_alpha);
draw_surface_stretched(application_surface,0,0,window_get_width(),window_get_height());
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Closing menu
draw_set_font(fnt_mario);
switch(global.closing){

  case 1:

   var T = scr_draw_message(display_get_gui_width(),display_get_gui_height(),
   "The level wasn't saved!#Would you like to save?","Save","Don't save","Cancel");
   
   if(room==rm_editor){
   
       instance_activate_object(obj_editor_entity); 
      instance_activate_object(obj_mario_editor);
   
   }
   
   switch(T){
    
       case 1: with(obj_editor_controller){event_user(0);} game_end(); break;
       
       
       case 2: game_end(); break;
       case 3: global.closing=0; break;
   
   }

  break;
  
  case 2:

    if(!obj_editor_controller.savebot_open){
  
   var T = scr_draw_message(display_get_gui_width(),display_get_gui_height(),
   "Memobot","Save","Save as","Open","Cancel");
   
   if(!onquestion){
   
    switch(T){
    
       case 1: 
       
               if(file_exists(working_directory+"\Levels\"+string(global.level_filename))){
                   with(obj_editor_controller){scr_save_level();} 
                   global.level_numb++;
                    with(obj_editor_controller){savebot_open=0;}  global.closing=0;
               }else{
                   onquestion=1; msg_var=get_string_async("Type the level name","Level"); 
                   //We use a get string cause god I don't want to make a custom typer it's pain
               }
       
       
               
       
       break;
       
       
       
       case 2: onquestion=1; msg_var=get_string_async("Type the level name","Level"); break;
       case 3: onquestion=1; fade=1; alarm[2]=30;break;
       case 4:   with(obj_editor_controller){savebot_open=0;} global.closing=0; break;
   
    }
   
   }
   
   }else{
   
     var T=scr_draw_message(display_get_gui_width(),display_get_gui_height(),
           "File with this name already exists, do#you want to replace it?#You won't be able to recover it","Yes","No");
           
           switch(T){
           
                 case 1:
                 show_debug_message("Replaced file");
                 event_user(1);
                 break;
                 
                 case 2:
                 show_debug_message("No file replaced");
                 global.closing=0; 
                 with(obj_editor_controller){savebot_open=0;} 
                 onquestion=0;
                 break;
           
           }
   
   }

  break;

}

draw_set_halign(fa_left); draw_set_valign(fa_top);
draw_set_colour(c_black);

var deOff=0;
if(room==rm_ingame){ deOff=40; }

draw_text_transformed(2+deOff,2,

"FPS:"+string(fps)+
"#"+string(global.level_filename)

,0.25,0.25,0);
draw_set_colour(c_white);

depth=-10;
draw_sprite_ext(global.cursor,0,device_mouse_x_to_gui(0)+8,device_mouse_y_to_gui(0)+8,
0.2,0.2,global.cursor_angle,c_white,1);


fade_alpha=scr_approach(fade_alpha,fade,0.1);
draw_set_alpha(fade_alpha);
draw_set_colour(c_black);
draw_rectangle(0,0,display_get_gui_width(),display_get_gui_height(),0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.closing){
   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
