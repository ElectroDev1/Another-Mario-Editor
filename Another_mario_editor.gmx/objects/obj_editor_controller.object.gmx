<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stock file
/*if(!file_exists("Levels\Level.sav")){
   var file = file_text_open_write("Levels\Level.sav");
       file_text_write_string(file, string(0));
   file_text_close(file);
}*/
//Get the ds grid

   //Data structure method
       /*   var items = 0;
   
          //Create the grid
          var levelmap = ds_grid_create(11,items+1);
   
          ds_grid_add(levelmap,0,0,string(items));
          ds_grid_add(levelmap,1,0,string(World));
          ds_grid_add(levelmap,2,0,string(Time));
          ds_grid_add(levelmap,3,0,string(Scroll));
          ds_grid_add(levelmap,4,0,string(ClearCond));

          
          //Serialize the grid to buffer
          var buffer = ds_grid_write(levelmap);
   
          //Store the buffer in a file
          var file = file_text_open_write("Temp\_Default_DO_NOT_DELETE.sav");
          
              file_text_write_string(file, string(items));
              
              file_text_writeln(file);
              
              file_text_write_string(file, string(buffer));
          
          file_text_close(file);
          
          ds_grid_destroy(levelmap);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button positions

Topmenu_height=36;




Leftmenu_top=37;
Leftmenu_width=55;


ButtonLeft_Sprite[0]=spr_game_button;
ButtonLeft_X[0]=28;
ButtonLeft_Y[0]=16;

ButtonLeft_Sprite[1]=spr_world_icon;
ButtonLeft_X[1]=16;
ButtonLeft_Y[1]=39;


ButtonLeft_Sprite[2]=spr_time_button;
ButtonLeft_X[2]=28;
ButtonLeft_Y[2]=83;

ButtonLeft_Sprite[3]=spr_shadowmario_button;
ButtonLeft_X[3]=39;
ButtonLeft_Y[3]=129;

ButtonLeft_Sprite[4]=spr_playmovie_base;
ButtonLeft_X[4]=24;
ButtonLeft_Y[4]=164;



Rightmenu_top=37;
Rightmenu_width=33;

ButtonRight_Sprite[0]=spr_menu_UI;
ButtonRight_X[0]=-16;
ButtonRight_Y[0]=50-Rightmenu_top;
ButtonClose[0]=0;

ButtonRight_Sprite[1]=spr_robotUI;
ButtonRight_X[1]=-16;
ButtonRight_Y[1]=78-Rightmenu_top;

ButtonRight_Sprite[2]=spr_rubberUI;
ButtonRight_X[2]=-16;
ButtonRight_Y[2]=115-Rightmenu_top;

ButtonRight_Sprite[3]=spr_redocat_UI;
ButtonRight_X[3]=-16;
ButtonRight_Y[3]=145-Rightmenu_top;

ButtonRight_Sprite[4]=spr_undodog_UI;
ButtonRight_X[4]=-16;
ButtonRight_Y[4]=168-Rightmenu_top;

ButtonRight_Sprite[5]=spr_rocket_UI;
ButtonRight_X[5]=-16;
ButtonRight_Y[5]=196-Rightmenu_top;

Menus=3;
MenuClose[Menus-1]=0;
MenuOffset[Menus-1]=0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Editor object

//If we loaded a level
global.loaded=0;

//If we should draw the ediotr (grid, HUD..)
global.draweditor=1;

//If we can place an entity
enitityplace=-1;

//Entity that we can place
selected_id=-1;

//HUD surface
gui_surf=-4;

//Grid surface
grid_surf=-4;


w=0; wt=0;

//If shadows should be rendered
shadow_allow=false;

//Create Mario
instance_create(64,340,obj_mario_editor);

//Editor state and indexes
state=0;
enum ControlState { normal, erase, searching }


VX=0;
VY=obj_controller.Window_H;

//ID of the selected identity
EntitySelected=-4;

//ID of the dragging entity
Drag_id=-4;

//If we're placing
Placing=0;

//If we're dragging
Dragging=0;

//Latest entity we've interacted with
LatestEntity=-4;


//Level attributes
World=0;
Time=0;
Scroll=0;
ClearCond=0;

//Some debug string
infostring="";
infoalpha=0;

//Undo, redo, and reset variables
temp_index=-1;
undo_time=-1;
redo_time=-1;
delet_time=-1;
delet_pos=0;
delet_shake=0;

//Set if the controller is editing
global.editing=0;

//If we're in the memobot menus
savebot_open=0;


//Background image to use while searching
search_bkg=-4;

search_bgk_shaded=-4;

//Search menu surface
search_surf=-4;


//Page in the surface
search_page=0;

//Position in the page
search_pagepos=0;


//Get uniform for background shader
usize = shader_get_uniform(shd_guassian_blur,"size");//uniform for width, height, radius

//Get the maximum amount of pages for each type
search_max_page_types[3] = 0;

search_pagemax = 0;

pageX[0]=0;
pageType[0]=0;

page_object[0,0]=0;



max_pages=0;

page_target_offset=0;
page_offset=0;

/*
This should return pages with objects of the same type spread correctly
*/

var page = 0;
var lastType = 0;
for(var a=0; a&lt;4; a++){

    //All entity classes should have a page by default
    search_max_page_types[a]=1;
    
    var obj_index=0;
    
    var wefound=0;
    
    
    //Go through all the elements and find the correct ones
    for(var i=0; i&lt;array_length_1d(obj_controller.entityname)+1; i++){
    
      if(i&lt;array_length_1d(obj_controller.entityname)){
      
        var value = ds_map_find_value(global.entityclass,obj_controller.entityname[i]);
        
        if(value==a){
           
            wefound=1;
        
            if(obj_index==0){
              show_debug_message("New page index set as "+string(value)); pageType[page]=value;}
        
           //Set object           
           if(obj_index==0){lastType=value;  pageType[page]=value;}
           
           page_object[page,obj_index]=obj_controller.entityname[i];   
              
           obj_index++;
           
           //If we exceed the amount of objects in a page, we make a new one in the category
           if(obj_index&gt;=7){
           
              search_max_page_types[a]++;
              page++;
              max_pages++;
              pageX[page] = pageX[page-1]+128;
              show_debug_message("New page index set [OVERRIDE FOUND,"+string(page)+"]");
              obj_index=0;
              wefound=0;
              
           
           }
           
        }
        
       }else if(wefound){//No more objects of the same types have been found to fill the page
       
          search_max_page_types[a]++;
          page++;
          max_pages++;
          pageX[page] = pageX[page-1]+128;
          show_debug_message("New page index set [NO MORE ENTRIES,"+string(page)+"]");
          obj_index=0;
          wefound=0;
       
       }
        
    
    }
   
    
    
}


show_debug_message("The amount of circles is "+string(max_pages));
page_radius[max_pages]=38;
//page_radius[0]=72;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(gui_surf);surface_free(grid_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter game
instance_destroy(obj_mario_shadow);
        //Create the entities
    with(obj_editor_entity){
         
        if(!UsesSprite){
         child=instance_create(x+1+sprite_get_xoffset(global.spritemap[? Entity_id]),
         y+1+sprite_get_yoffset(global.spritemap[? Entity_id]),
         global.entitymap[? Entity_id]);
        }
        else{
        
         child=instance_create(x,
         y,
         global.entitymap[? Entity_id]);
        
        }
         
         switch(child.object_index){
         
                case obj_question_block :
                case obj_coin :
                case obj_inv_block :
                      child.image_speed=0.2;    
                break;
                
                case obj_arrow :
                      child.image_angle=Attribute[Attributes.Direction];
                break;
                
                case obj_bridge :
                      child.image_xscale=Attribute[Attributes.Width];
                break;
                
                /*case obj_spring :
                      child.x+=8;
                      child.y+=8;
                break;*/
         
         }
         
         if(tile_exists(tile)){ tile_set_visible(tile,false); }
         visible=false;
    
    }
    
    with(obj_mario_editor){
         alarm[0]=1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Search menu logic
if(state==ControlState.searching)&amp;&amp;(room==rm_editor){

   //Inputs
   
   //Close
   var closeHover = point_in_rectangle(device_mouse_x(0),device_mouse_y(0),
                    view_xview[0]+view_wview[0]-27-8,
                    view_yview[0]+27-8,
                    view_xview[0]+view_wview[0]-27+8,
                    view_yview[0]+27+8
                    );
   
   if(keyboard_check_pressed(vk_escape) || ( mouse_check_button_pressed(mb_left) &amp;&amp; closeHover )){
      instance_activate_object(obj_editor_entity); 
      instance_activate_object(obj_mario_editor);
      state=ControlState.normal;
   }
   
   //Move
   if(keyboard_check_pressed(vk_right)){
      search_pagepos=0;
      if(search_page&lt;max_pages-1){search_page++;}else{search_page=0;}
   }
   
   if(keyboard_check_pressed(vk_left)){
      search_pagepos=0;
      if(search_page&gt;0){search_page--;}else{search_page=max_pages-1;}
   }

   //Select entity
   /*
   I don't think I'll ever add mouse support for the full slices the items take on the wheel
   so for now it'll just check if the mouse is in the general position of the sprite
   */
   for(var i=0; i&lt;array_length_2d(page_object,search_page); i++;){
   
      var dist = 30*2+(page_radius[search_page]-30*2)/2;
       
       var X = view_wview[0]/2 + pageX[search_page]*2 - page_offset;
       var Y = view_hview[0]/2;
       
       var ICOX=lengthdir_x(dist/2 ,360/array_length_2d(page_object,search_page)*i + 90);
       var ICOY=lengthdir_y(dist/2,360/array_length_2d(page_object,search_page)*i + 90);
       
       var RECDIV=2.5;
       var SPR=global.spritemap[? page_object[search_page,i]];
       
       if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),
          view_xview[0]+X+ICOX-16/(RECDIV/2)-3,
          view_yview[0]+Y+ICOY-16/(RECDIV/2)-3,
          view_xview[0]+X+ICOX+16/(RECDIV/2)+3,
          view_yview[0]+Y+ICOY+16/(RECDIV/2)+3)){
               search_pagepos=i;
               
               
               if(mouse_check_button_pressed(mb_left)){
                  //Put the entity selected in the list and shift all the other to 1 (pinning will come eventually)
                  
                  //Check if the entity is already in the list
                  var pass=1;
                  
                  for(var a=0; a&lt;12; a++){
                      if(ds_list_find_value(global.entity_list,a)==page_object[search_page,i]){
                         pass=0;
                      }  
                  }
                  
                  if(pass){
                     for(var a=1; a&lt;12; a++){
                      ds_list_replace(global.entity_list,a-1,ds_list_find_value(global.entity_list,a));
                     }
                     ds_list_replace(global.entity_list,11,page_object[search_page,i]);
                  }   
                     
                  instance_activate_object(obj_editor_entity); 
                  instance_activate_object(obj_mario_editor);
                  state=ControlState.normal;
                  
               }
               
       }
   
   }
   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(savebot_open){global.closing=2;}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Editor logic

//Increase the idle variable
with(obj_controller){ if(idling&lt;3700){idling++;} }

//Stop logic if we're closing or not on the editor
if(room!=rm_editor || global.closing){exit;}

//Set up Discord RPC
global.state="In the editor";
global.details="Editing level '"+string(global.level_filename)+"'";
global.icon="rpc_edit";

//Update menu positions
MenuOffset[0]=scr_approach(MenuOffset[0],MenuClose[0],0.1);
MenuOffset[1]=scr_approach(MenuOffset[1],MenuClose[1],0.1);
MenuOffset[2]=scr_approach(MenuOffset[2],MenuClose[2],0.1);

//Update selected entity
EntitySelected=obj_mousechek.entitycollision;

//Wave variable
w=sin(wt*0.1);
wt++;

//Get the entity id
if(state==ControlState.normal){

 //Select object from menu
 for(var a=0; a&lt;12; a++){

    var X=40+27*a;

    //Place
    if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),
    view_xview[0]+X-10,view_yview[0]+20-12-Topmenu_height*MenuOffset[0],
    view_xview[0]+X+11,view_yview[0]+20+12-Topmenu_height*MenuOffset[0])){
    
       if(mouse_check_button_pressed(mb_left)){with(obj_controller){ idling=0; } state=ControlState.normal; enitityplace=1; selected_id=a;}
    
    }    
 }
 
 //Select an onject
 if(EntitySelected){
 
 
 
    if(mouse_check_button_pressed(mb_right)){
       
       //Get out of the placing state
       enitityplace=0; selected_id=-1;
       global.editing=0;
                            
       //Interact with the entity
       with(EntitySelected){
       
            switch(Entity_id){
                   case "Arrow":  Attribute[Attributes.Direction]+=45; with(other){event_user(2);} break;
            }
       
       }
       
       
       
    }else if(mouse_check_button_pressed(mb_left)&amp;&amp;(!global.editing)){//Set dragging ID
    
        Drag_id=EntitySelected;
      
    }
 
 }
 
 //Drag
 if(mouse_check_button(mb_left))
 &amp;&amp;(device_mouse_y(0)&gt;view_yview+Topmenu_height+4-Topmenu_height*MenuOffset[0])&amp;&amp;
   (device_mouse_x(0)&gt;view_xview+Leftmenu_width+4-Leftmenu_width*MenuOffset[2])&amp;&amp;
   (device_mouse_x(0)&lt;view_xview+view_wview-Rightmenu_width-6+Rightmenu_width*MenuOffset[1])
   &amp;&amp;(!instance_exists(obj_reset_rocket)){
    
        //Wait a bit to drag
        if(Dragging&lt;1)&amp;&amp;(instance_exists(Drag_id))&amp;&amp;(EntitySelected)&amp;&amp;(!Placing){ if(Drag_id!=LatestEntity)&amp;&amp;(Drag_id.Edited==0){ Dragging+=0.35; } }
 
        if(Dragging&gt;=1)&amp;&amp;(instance_exists(Drag_id))&amp;&amp;(!Placing){
        
           //Get out of the placing state
           enitityplace=0; selected_id=-1;
       
           //Get the entity id
           var entity = Drag_id;
           
           if(entity.UsesSprite==-4){ var off=-8; }else{ var off=0; }
           
           entity.x=mouse_x+off; entity.y=mouse_y+off;
           with(entity){move_snap(16,16);}
        
        }
      
 }else{ if(Dragging&gt;=1){event_user(2);} Dragging=0; }
 
 if(point_in_circle(device_mouse_x(0),device_mouse_y(0),view_xview+view_wview+ButtonRight_X[2]+Rightmenu_width*MenuOffset[1],
 view_yview+ButtonRight_Y[2]+Rightmenu_top,10)){
 
    if(mouse_check_button_pressed(mb_left)){with(obj_controller){ idling=0; } state=ControlState.erase; global.cursor_angle=0;}
    
 }
 
 
}else if(state==ControlState.erase){//Eraser

  if(mouse_check_button(mb_left)){
  
     //Use the eraser
     global.cursor_angle=45;
     with(obj_controller){ idling=0; }
     
     if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),obj_mario_editor.bbox_left,obj_mario_editor.bbox_top,obj_mario_editor.bbox_right,obj_mario_editor.bbox_bottom)){
        with(obj_mario_editor){
             sprite_index=spr_mario_crouch;
             shake=3;
        }
     }else{
          with(obj_mario_editor){
             sprite_index=spr_mario_idle;
             shake=0;
        }
     }

     //Erase
     if(EntitySelected){
     
        
        with(EntitySelected){ 
        
 
         instance_destroy(); 
        
        }
        Placing=1;
     
     }
     
       
  }else if(mouse_check_button_released(mb_left)){//Stop the eraser
  
        global.cursor_angle=0;
     
        with(obj_mario_editor){
             sprite_index=spr_mario_idle;
             shake=0;
        }
     
     
  }
  
  
  //Go back to the normal state
  if(point_in_circle(device_mouse_x(0),device_mouse_y(0),view_xview+view_wview+ButtonRight_X[2]+Rightmenu_width*MenuOffset[1],view_yview+ButtonRight_Y[2]+Rightmenu_top,10)){
  
   if(mouse_check_button_pressed(mb_left)){with(obj_controller){ idling=0; } state=ControlState.normal; global.cursor_angle=0;}

  }


}
 
//Buttons-------------
if(state!=ControlState.searching){


//Search
if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),
   view_xview+view_wview-17-sprite_get_xoffset(spr_magnUI),
   view_yview+21-sprite_get_yoffset(spr_magnUI)-Topmenu_height*MenuOffset[0],
   view_xview+view_wview-17+sprite_get_xoffset(spr_magnUI),
   view_yview+21+sprite_get_yoffset(spr_magnUI)-Topmenu_height*MenuOffset[0]
   )){
   
      if(mouse_check_button_pressed(mb_left)){ 
      
                   with(obj_controller){ idling=0; } 
                   
                   //Create a background image
                   if(sprite_exists(search_bkg)){ sprite_delete(search_bkg); }
                   
                   search_bkg=sprite_create_from_surface(application_surface,0,0,
                   surface_get_width(application_surface),surface_get_height(application_surface),0,0,0,0);
                 
                   instance_deactivate_object(obj_editor_entity); 
                   instance_deactivate_object(obj_mario_editor);
                   state=ControlState.searching; 
      }
   
}


//Savebot
if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),

   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[1]-sprite_get_xoffset(ButtonRight_Sprite[1]),
   view_yview+ButtonRight_Y[1]+Rightmenu_top-sprite_get_yoffset(ButtonRight_Sprite[1]),
   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[1]+sprite_get_xoffset(ButtonRight_Sprite[1]),
   view_yview+ButtonRight_Y[1]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[1])
   
   )){
   
    if(mouse_check_button_pressed(mb_left)){with(obj_controller){ idling=0; } enitityplace=0; selected_id=-1;  global.closing=2; }
   
}


//Undo
if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),

   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[4]-sprite_get_xoffset(ButtonRight_Sprite[4]),
   view_yview+ButtonRight_Y[4]+Rightmenu_top-sprite_get_yoffset(ButtonRight_Sprite[4]),
   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[4]+sprite_get_xoffset(ButtonRight_Sprite[4]),
   view_yview+ButtonRight_Y[4]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[4])
   
   )){
  
   if(mouse_check_button_pressed(mb_left)&amp;&amp;(!instance_exists(obj_reset_rocket))){ undo_time=0; } 

   if(mouse_check_button(mb_left) &amp;&amp; (undo_time&gt;=0)){
      if(undo_time&lt;1.05){undo_time+=0.025;}else{ event_user(3); undo_time=-1; }
   }
   
   
}else{ undo_time=-1; }


//Redo
if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),

   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[3]-sprite_get_xoffset(ButtonRight_Sprite[3]),
   view_yview+ButtonRight_Y[3]+Rightmenu_top-sprite_get_yoffset(ButtonRight_Sprite[3]),
   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[3]+sprite_get_xoffset(ButtonRight_Sprite[3]),
   view_yview+ButtonRight_Y[3]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[3])
   
   )){
  
   if(mouse_check_button_pressed(mb_left)&amp;&amp;(!instance_exists(obj_reset_rocket))){ with(obj_controller){ idling=0; } redo_time=0; } 

  if(mouse_check_button(mb_left) &amp;&amp; (redo_time&gt;=0)){
      if(redo_time&lt;1.05){redo_time+=0.025;}else{ event_user(4); redo_time=-1; }
   }
   
   
}else{ redo_time=-1; }



//Delete
if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),

   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[5]-sprite_get_xoffset(ButtonRight_Sprite[5]),
   view_yview+ButtonRight_Y[5]+Rightmenu_top-sprite_get_yoffset(ButtonRight_Sprite[5]),
   view_xview+view_wview+Rightmenu_width*MenuOffset[1]+ButtonRight_X[5]+sprite_get_xoffset(ButtonRight_Sprite[5]),
   view_yview+ButtonRight_Y[5]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[5])
   
   )){
  
   if(mouse_check_button_pressed(mb_left)&amp;&amp;(!instance_exists(obj_reset_rocket))){ with(obj_controller){ idling=0; } delet_time=0; } 

   
   
   if(mouse_check_button(mb_left) &amp;&amp; (delet_time&gt;=0)){
   
      delet_shake=1;
   
      if(delet_time&lt;1.05){delet_time+=0.025;}else{ 
         
          if(delet_pos&lt;2){
             delet_pos++; delet_time=0;
          }else{
            event_user(5); delet_pos=0; delet_time=-1; 
          }
          
      }
   }
   else{ delet_shake=scr_approach(delet_shake,0,0.2); delet_pos=0; delet_time=-1;  }
   
   //if(mouse_check_button_released(mb_left)){ surface_free(gui_surf); }
   
   
   
}else{ delet_shake=scr_approach(delet_shake,0,0.2); delet_time=-1; delet_pos=0; }

ButtonRight_X[5]=-16+random_range(-delet_shake,delet_shake);
ButtonRight_Y[5]=196-Rightmenu_top+random_range(-delet_shake,delet_shake);


//Shadow mario
if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),
   view_xview+Leftmenu_width*MenuOffset[2]+ButtonLeft_X[3]-sprite_get_xoffset(ButtonLeft_Sprite[3]),
   view_yview+Leftmenu_top+ButtonLeft_Y[3]-sprite_get_yoffset(ButtonLeft_Sprite[3]),
   view_xview+Leftmenu_width*MenuOffset[2]+ButtonLeft_X[3]+sprite_get_xoffset(ButtonLeft_Sprite[3]),
   view_yview+Leftmenu_top+ButtonLeft_Y[3]+sprite_get_yoffset(ButtonLeft_Sprite[3])
   )){
   
   if(mouse_check_button_pressed(mb_left)){
      with(obj_controller){ idling=0; }
      shadow_allow=!shadow_allow;
   }
   
}
   





//Released event
if(mouse_check_button_released(mb_left)){ 
   
   if(Placing){  event_user(2); }

   if(Dragging&gt;=1)&amp;&amp;(!Placing){
      with(Drag_id){if(collision_rectangle(bbox_left+1,bbox_top+1,bbox_right-1,bbox_bottom-1,obj_editor_entity,0,1)){instance_destroy();}}
      event_user(2);
   }
   

   Placing=0;
   Dragging=0;
   LatestEntity=-4;
   undo_time=-1;
   redo_time=-1;
   global.editing=0;
   with(obj_controller){ idling=0; }
   
} 

}

//Keep view in room

//Up
if(view_yview[view_current]&lt;64){view_yview[view_current]+=8; view_yview[view_current]=64;}

//Left border
if(view_xview[view_current]&lt;0){
view_xview[view_current]+=8; view_xview[view_current]=0;}

//Right border
if(view_xview[view_current]&gt;room_width-view_wview[view_current]){
view_xview[view_current]=room_width-view_wview[view_current];}

//Down
if(view_yview[view_current]&gt;room_height-view_hview[view_current]+8){
view_yview[view_current]-=8; view_yview[view_current]=room_height-view_hview[view_current]+8;}


view_yview=min(view_yview,room_height-view_hview-8);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_user(2);

instance_create(view_xview+view_wview/2,view_yview+view_hview+70,obj_reset_rocket);

with(obj_mario_editor){ x = xstart; y = ystart; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Redo
with(obj_controller){ idling=0; }
global.saved=1;
  if(file_exists("Temp\TempLevel_"+string(temp_index+1)+".sav")){

     //Clear the room
    with(obj_editor_entity){instance_destroy();}
   

     
    //Get the ds grid
    var file = file_text_open_read("Temp\TempLevel_"+string(temp_index+1)+".sav");
    
        var items = real(file_text_read_string(file));
        
        file_text_readln(file);
          
        var buffer = (file_text_read_string(file));
          
    file_text_close(file);
    
    var levelmap = /*ds_grid_read_buffer(buffer);*/ds_grid_create(11,items+1);
    //Convert the buffer into a ds grid
    ds_grid_read(levelmap,buffer);
    
        //var items = ds_grid_get(levelmap,0,0);
        World=real(ds_grid_get(levelmap,1,0));
        Time=real(ds_grid_get(levelmap,2,0));
        Scroll=real(ds_grid_get(levelmap,3,0));
        ClearCond=real(ds_grid_get(levelmap,4,0));
        

        //Create the objects
        for(var pos=0; pos&lt;items; pos++){
        
            with(instance_create(
            real(ds_grid_get(levelmap,1,pos+1)),
            real(ds_grid_get(levelmap,2,pos+1)),
            obj_editor_entity)){
            
                 Entity_id = ds_grid_get(levelmap,0,pos+1);
                 
                 for(var a=0; a&lt;array_length_1d(Attribute); a++){
                     Attribute[a] = real(ds_grid_get(levelmap,a+3,pos+1));
                 }
            
            
            
            UsesSprite = real(ds_grid_get(levelmap,array_length_1d(Attribute)+3,pos+1));
            
            }
            
             show_debug_message("Item created successfully at "
             +string(ds_grid_get(levelmap,1,pos+1))+"/"+string(ds_grid_get(levelmap,2,pos+1)) );

        }
        
        if(pos==items){
         ds_grid_destroy(levelmap);
        }
        
        temp_index++;
 
   }
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load temp
with(obj_controller){ idling=0; }
//Load the current temp file
if(temp_index&gt;-1){
global.saved=0;

    //Clear the room
    with(obj_editor_entity){instance_destroy();}
   
    show_debug_message("Saved temp of index "+string(temp_index));
    
  if(file_exists("Temp\TempLevel_"+string(temp_index-1)+".sav")){
     
    //Get the ds grid
    var file = file_text_open_read("Temp\TempLevel_"+string(temp_index-1)+".sav");
    
        var items = real(file_text_read_string(file));
        
        file_text_readln(file);
          
        var buffer = (file_text_read_string(file));
          
    file_text_close(file);
    
    var levelmap = /*ds_grid_read_buffer(buffer);*/ds_grid_create(11,items+1);
    //Convert the buffer into a ds grid
    ds_grid_read(levelmap,buffer);
    
        //var items = ds_grid_get(levelmap,0,0);
        World=real(ds_grid_get(levelmap,1,0));
        Time=real(ds_grid_get(levelmap,2,0));
        Scroll=real(ds_grid_get(levelmap,3,0));
        ClearCond=real(ds_grid_get(levelmap,4,0));
        

        //Create the objects
        for(var pos=0; pos&lt;items; pos++){
        
            with(instance_create(
            real(ds_grid_get(levelmap,1,pos+1)),
            real(ds_grid_get(levelmap,2,pos+1)),
            obj_editor_entity)){
            
                 Entity_id = ds_grid_get(levelmap,0,pos+1);
                 
                 for(var a=0; a&lt;array_length_1d(Attribute); a++){
                     Attribute[a] = real(ds_grid_get(levelmap,a+3,pos+1));
                 }
                 
                 Angle=Attribute[Attributes.Direction];
                 
                 UsesSprite = real(ds_grid_get(levelmap,array_length_1d(Attribute)+3,pos+1));
            
            }
             show_debug_message("Item created successfully at "
             +string(ds_grid_get(levelmap,1,pos+1))+"/"+string(ds_grid_get(levelmap,2,pos+1)) );

        }
        
        if(pos==items){
         ds_grid_destroy(levelmap);
        }
        
  }
}
        
         if(temp_index&gt;-1){temp_index--;}
        //file_delete("Temp\TempLevel_"+string(temp_index)+".sav");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save a temp file
with(obj_controller){ idling=0; }
   temp_index++; 
   global.saved=0;
          //Data structure method
          var items = instance_number(obj_editor_entity);
   
          //Create the grid
          var levelmap = ds_grid_create(11,items+1);
   
          ds_grid_add(levelmap,0,0,string(items));
          ds_grid_add(levelmap,1,0,string(World));
          ds_grid_add(levelmap,2,0,string(Time));
          ds_grid_add(levelmap,3,0,string(Scroll));
          ds_grid_add(levelmap,4,0,string(ClearCond));

          var pos=0;
          
          //Entities
          with(obj_editor_entity){
          
               ds_grid_add(levelmap,0,pos+1,string(Entity_id));
               ds_grid_add(levelmap,1,pos+1,string(x));
               ds_grid_add(levelmap,2,pos+1,string(y));
               
               
               for(var a=0; a&lt;array_length_1d(Attribute); a++){
                   ds_grid_add(levelmap, a+3, pos+1, string(Attribute[a]));
               }
               
               ds_grid_add(levelmap, array_length_1d(Attribute)+3, pos+1,UsesSprite);
               
               pos++;
          
          }
          
          if(pos==items){
          
          //Serialize the grid to buffer
          var buffer = /*ds_grid_write_buffer(levelmap);*/ds_grid_write(levelmap);
   
          //Store the buffer in a file
          var file = file_text_open_write("Temp\TempLevel_"+string(temp_index)+".sav");
          
              file_text_write_string(file, string(items));
              
              file_text_writeln(file);
              
              file_text_write_string(file, string(buffer));
          
          file_text_close(file);
          
          ds_grid_destroy(levelmap);
          
          }
          
          show_debug_message("Saved temp of index "+string(temp_index));
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load levels
with(obj_controller){ idling=0; }
directory_destroy("Temp");
temp_index=-1;

    //Data structure method
    infostring="Loaded level";
    infoalpha=2;
    global.saved=1;
    
    //Clear the room
    with(obj_editor_entity){instance_destroy();}
    
    //Get the ds grid
    var file = file_text_open_read("Levels\"+string(global.level_filename));
    
        var items = real(file_text_read_string(file));
        
        file_text_readln(file);
          
        var buffer = (file_text_read_string(file));
        //show_debug_message("Loaded buffer ["+string(buffer)+"]");
          
    file_text_close(file);
    
    var levelmap = /*ds_grid_read_buffer(buffer);*/ds_grid_create(11,items+1);
    //Convert the buffer into a ds grid
    ds_grid_read(levelmap,buffer);
    
        //var items = ds_grid_get(levelmap,0,0);
        World=real(ds_grid_get(levelmap,1,0));
        Time=real(ds_grid_get(levelmap,2,0));
        Scroll=real(ds_grid_get(levelmap,3,0));
        ClearCond=real(ds_grid_get(levelmap,4,0));
        
        //show_debug_message("Items found "+string(items));
        

        //Create the objects
        for(var pos=0; pos&lt;items; pos++){
        
            with(instance_create(
            real(ds_grid_get(levelmap,1,pos+1)),
            real(ds_grid_get(levelmap,2,pos+1)),
            obj_editor_entity)){
            
                 Entity_id = ds_grid_get(levelmap,0,pos+1);
                 
                 for(var a=0; a&lt;array_length_1d(Attribute); a++){
                     Attribute[a] = real(ds_grid_get(levelmap,a+3,pos+1));
                 }
                 
                 Angle=Attribute[Attributes.Direction];
                 
                 UsesSprite = real(ds_grid_get(levelmap,array_length_1d(Attribute)+3,pos+1));
            
            }
             //show_debug_message("Item created successfully at "
             //+string(ds_grid_get(levelmap,1,pos+1))+"/"+string(ds_grid_get(levelmap,2,pos+1)) );

        }
        
        if(pos==items){
         ds_grid_destroy(levelmap);
        }
global.saved=1;
        
directory_destroy("Temp");
temp_index=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save level
if(room==rm_editor){

   /*
   So my choice was to either use data structures which would lower how much space each
   level file gets, or use have a list with all the properties than can be easily viewed
   */
   
   //For now I'll try data structures
   
   /*
   We go through all the level entities and save their indexes + special attributes based
   on the object type
   We also save the level attributes at the start
   */
   
   global.draweditor=0;
   
   shadow_allow=0;
   
   var desprite=sprite_create_from_surface(application_surface,0,0,
   surface_get_width(application_surface),surface_get_height(application_surface),
   0,0,0,0);
   
   sprite_save(desprite,0,"Levels\Level images\"+string(global.level_filename)+".png");
   
   sprite_delete(desprite);
   shadow_allow=1;
   
   global.draweditor=1;
   
   with(obj_controller){ idling=0; }
   infostring="Saved level";
   infoalpha=2;
   global.saved=1;
   
          //Data structure method
          var items = instance_number(obj_editor_entity);
   
          //Create the grid
          var levelmap = ds_grid_create(13,items+1);
   
          ds_grid_add(levelmap,0,0,string(items));
          ds_grid_add(levelmap,1,0,string(World));
          ds_grid_add(levelmap,2,0,string(Time));
          ds_grid_add(levelmap,3,0,string(Scroll));
          ds_grid_add(levelmap,4,0,string(ClearCond));

          var pos=0;
          
          //Entities
          with(obj_editor_entity){
          
               ds_grid_add(levelmap,0,pos+1,string(Entity_id));
               ds_grid_add(levelmap,1,pos+1,string(x));
               ds_grid_add(levelmap,2,pos+1,string(y));
               
               //show_debug_message("Item loaded successfully at "
            // +string(ds_grid_get(levelmap,1,pos+1))+"/"+string(ds_grid_get(levelmap,2,pos+1)) );
              
               for(var a=0; a&lt;array_length_1d(Attribute); a++){
                   ds_grid_add(levelmap, a+3, pos+1, string(Attribute[a]));
               }
               
               ds_grid_add(levelmap, array_length_1d(Attribute)+3, pos+1,UsesSprite);
               
               pos++;
          
          }
          
          if(pos==items){
          
          //Serialize the grid to buffer
          var buffer = /*ds_grid_write_buffer(levelmap);*/ds_grid_write(levelmap);
   
          //Store the buffer in a file
          var file = file_text_open_write("Levels\"+string(global.level_filename)+".sav");
          
              file_text_write_string(file, string(items));
              
              file_text_writeln(file);
              
              file_text_write_string(file, string(buffer));
          
          file_text_close(file);
          
          ds_grid_destroy(levelmap);
          
          }
    
          show_debug_message("Level '"+string(global.level_filename)+"' saved");
          global.saved=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(gui_surf);surface_free(grid_surf);
if(surface_exists(search_surf)){surface_free(search_surf);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


if(file_exists(working_directory+"\Levels\"+global.level_filename)
   &amp;&amp;(room==rm_editor)&amp;&amp;(!global.loaded)&amp;&amp;(global.level_filename!="") ){
   event_user(1);
   global.loaded=1;
}


enitityplace=-1;

gui_surf=-4;

grid_surf=-4;

selected_id=-1;

state=0;

if (!view_enabled)&amp;&amp;(room==rm_editor || room==rm_ingame) {


   view_visible[0]=true;
   view_wview[0]=obj_controller.Window_W;
   view_hview[0]=obj_controller.Window_H;
   view_wport[0]=obj_controller.Window_W;
   view_hport[0]=obj_controller.Window_H;
   view_yview[0]=VY;
   view_xview[0]=VX;
   view_enabled=true;

}

global.editing=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw on the GUI layer
if(room!=rm_editor){if(surface_exists(gui_surf)){surface_free(gui_surf);} exit;}
if(global.closing){if(surface_exists(gui_surf)){surface_free(gui_surf);} exit;}

if(!surface_exists(gui_surf)){
   gui_surf=surface_create(display_get_gui_width(),display_get_gui_height());
}else{


//Draw the HUD
surface_set_target(gui_surf);

draw_clear_alpha(c_blue,0);


//Top bar
draw_set_colour(c_white);
draw_set_alpha(0.4);
draw_rectangle(0,0,display_get_gui_width(),Topmenu_height-Topmenu_height*MenuOffset[0],0);

draw_set_alpha(1);

var halfX=display_get_gui_width()/2;

draw_rectangle(halfX-6,
Topmenu_height-Topmenu_height*MenuOffset[0],halfX+6,Topmenu_height-Topmenu_height*MenuOffset[0]+4,0);

if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),
halfX-6,Topmenu_height-Topmenu_height*MenuOffset[0],
halfX+6,Topmenu_height-Topmenu_height*MenuOffset[0]+4)){

   if(mouse_check_button_pressed(mb_left)){ with(obj_controller){ idling=0; }  MenuClose[0]=!MenuClose[0]; }

}

draw_line_width(0,Topmenu_height-Topmenu_height*MenuOffset[0],display_get_gui_width(),
Topmenu_height-Topmenu_height*MenuOffset[0],1);

//Draw icons
for(var a=0; a&lt;12; a++){
  
    var X=40+27*a;
    if(selected_id==a){ var Y=w; }else{ var Y=0; }

    draw_sprite_ext(spr_objectUI,0,X, 21-Topmenu_height*MenuOffset[0]  ,1,1,0,c_black,0.25);
    
    draw_sprite(spr_objectUI,
    global.entityclass[? ds_list_find_value(global.entity_list,a)],X, 20-Topmenu_height*MenuOffset[0]);
    
    draw_sprite(global.spritemap[? ds_list_find_value(global.entity_list,a)],0,X, (21+Y)-Topmenu_height*MenuOffset[0]);
    
}

draw_sprite_ext(spr_magnUI,0,
display_get_gui_width()-17,21-Topmenu_height*MenuOffset[0],1,1,0,c_black,0.25);

draw_sprite(spr_magnUI,0,
display_get_gui_width()-17,20-Topmenu_height*MenuOffset[0]);



//Right side
draw_set_colour(c_white);
draw_set_alpha(0.4);
draw_rectangle(display_get_gui_width()-Rightmenu_width +Rightmenu_width*MenuOffset[1],
Rightmenu_top,display_get_gui_width()+Rightmenu_width*MenuOffset[1],display_get_gui_height(),0);

var halfY=Rightmenu_top + (display_get_gui_height()-Rightmenu_top)/2;

if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),
display_get_gui_width()-Rightmenu_width-6+Rightmenu_width*MenuOffset[1],halfY-6,
display_get_gui_width()-Rightmenu_width+Rightmenu_width*MenuOffset[1],halfY+6)){

   if(mouse_check_button_pressed(mb_left)){ with(obj_controller){ idling=0; } enitityplace=0; selected_id=-1; MenuClose[1]=!MenuClose[1]; }

}

draw_set_alpha(1);

draw_rectangle(
display_get_gui_width()-Rightmenu_width-4+Rightmenu_width*MenuOffset[1],halfY-6,
display_get_gui_width()-Rightmenu_width+Rightmenu_width*MenuOffset[1],halfY+6,0);

draw_line(display_get_gui_width()-Rightmenu_width+Rightmenu_width*MenuOffset[1],
Rightmenu_top-1,display_get_gui_width()-Rightmenu_width+Rightmenu_width*MenuOffset[1],display_get_gui_height());

draw_line(display_get_gui_width()-Rightmenu_width+Rightmenu_width*MenuOffset[1]
,Rightmenu_top-1,display_get_gui_width()+Rightmenu_width*MenuOffset[1],Rightmenu_top-1);

//Draw the right buttons
for(var a=0; a&lt;array_length_1d(ButtonRight_Sprite); a++){

    var img=0;
    if(ButtonRight_Sprite[a]==spr_robotUI){ var img=savebot_open; }

    draw_sprite_ext(ButtonRight_Sprite[a],img,display_get_gui_width()+ButtonRight_X[a]+Rightmenu_width*MenuOffset[1],ButtonRight_Y[a]+1+Rightmenu_top,1,1,0,c_black,0.25);
    draw_sprite(ButtonRight_Sprite[a],img,display_get_gui_width()+ButtonRight_X[a]+Rightmenu_width*MenuOffset[1],ButtonRight_Y[a]+Rightmenu_top);
    
   

}



draw_set_colour(c_black);

//Redo circle
draw_pie(display_get_gui_width()+Rightmenu_width*MenuOffset[1]+ButtonRight_X[3]+sprite_get_xoffset(ButtonRight_Sprite[3]),
ButtonRight_Y[3]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[3]),1,1,c_black,4,1);
draw_set_colour(c_white);
draw_pie(display_get_gui_width()+Rightmenu_width*MenuOffset[1]+ButtonRight_X[3]+sprite_get_xoffset(ButtonRight_Sprite[3]) ,
ButtonRight_Y[3]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[3]),max(redo_time,0), 1, c_red, 3, 1);

//Undo circle
draw_pie(display_get_gui_width()+Rightmenu_width*MenuOffset[1]+ButtonRight_X[4]+sprite_get_xoffset(ButtonRight_Sprite[4]),
ButtonRight_Y[4]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[4]),1,1,c_black,4,1);
draw_set_colour(c_white);
draw_pie(display_get_gui_width()+Rightmenu_width*MenuOffset[1]+ButtonRight_X[4]+sprite_get_xoffset(ButtonRight_Sprite[4]) ,
ButtonRight_Y[4]+Rightmenu_top+sprite_get_yoffset(ButtonRight_Sprite[4]),max(undo_time ,0), 1, c_red, 3, 1);



//Left side
draw_set_colour(c_white);
draw_set_alpha(0.4);

draw_rectangle(-Leftmenu_width*MenuOffset[2],Leftmenu_top,Leftmenu_width-Leftmenu_width*MenuOffset[2],display_get_gui_height()-Leftmenu_top,0);

draw_set_alpha(0.8);
draw_rectangle(-Leftmenu_width*MenuOffset[2],display_get_gui_height()-Leftmenu_top-24,Leftmenu_width-Leftmenu_width*MenuOffset[2],display_get_gui_height()-Leftmenu_top,0);

draw_set_alpha(1);


var halfY=Leftmenu_top + (display_get_gui_height()-Leftmenu_top-Leftmenu_top)/2;

draw_rectangle(Leftmenu_width-Leftmenu_width*MenuOffset[2],halfY-6,Leftmenu_width-Leftmenu_width*MenuOffset[2]+4,halfY+6,0);


//Slide
if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),
Leftmenu_width-Leftmenu_width*MenuOffset[2],halfY-6,Leftmenu_width-Leftmenu_width*MenuOffset[2]+4,halfY+6
)){
   if(mouse_check_button_pressed(mb_left)){ with(obj_controller){ idling=0; }  MenuClose[2]=!MenuClose[2]; }
}



draw_line(Leftmenu_width-Leftmenu_width*MenuOffset[2],Leftmenu_top-1,Leftmenu_width-Leftmenu_width*MenuOffset[2],display_get_gui_height()-Leftmenu_top-1);
draw_line(-1-Leftmenu_width*MenuOffset[2],display_get_gui_height()-Leftmenu_top,Leftmenu_width-1-Leftmenu_width*MenuOffset[2],display_get_gui_height()-Leftmenu_top);
draw_line(-1-Leftmenu_width*MenuOffset[2],Leftmenu_top-1,Leftmenu_width-1-Leftmenu_width*MenuOffset[2],Leftmenu_top-1);

//Draw the right buttons
for(var a=0; a&lt;array_length_1d(ButtonLeft_Sprite); a++){

    

    draw_sprite_ext(ButtonLeft_Sprite[a],0,ButtonLeft_X[a]-Leftmenu_width*MenuOffset[2],ButtonLeft_Y[a]+1+Leftmenu_top,1,1,0,c_black,0.25);
    draw_sprite(ButtonLeft_Sprite[a],0,ButtonLeft_X[a]-Leftmenu_width*MenuOffset[2],ButtonLeft_Y[a]+Leftmenu_top);

     switch(a){ 
        case 0: 
          //texture_set_interpolation(true);
          draw_sprite_ext(spr_game_icon,0,ButtonLeft_X[0]-Leftmenu_width*MenuOffset[2],ButtonLeft_Y[0]+Leftmenu_top,1,1,0,c_white,1);
          texture_set_interpolation(false);
        break;
        
        case 2:
          draw_set_halign(fa_left); draw_set_valign(fa_middle); draw_set_colour(c_black); draw_set_font(fnt_mario);
          draw_text_transformed(ButtonLeft_X[0]-Leftmenu_width*MenuOffset[2]-4,ButtonLeft_Y[2]+Leftmenu_top+2,"000",0.5,0.5,0);
          draw_set_colour(c_white);
        break;
        
        case 3:
          if(shadow_allow){draw_sprite(spr_shadowmario_button,1,ButtonLeft_X[a]-Leftmenu_width*MenuOffset[2],ButtonLeft_Y[a]+Leftmenu_top);}
        break;
        
        case 4:
          draw_sprite(spr_playmovie_bar,0,ButtonLeft_X[4]-sprite_get_xoffset(ButtonLeft_Sprite[4])-Leftmenu_width*MenuOffset[2],
          ButtonLeft_Y[4]+Leftmenu_top-sprite_get_yoffset(ButtonLeft_Sprite[4]));
        break;
    }
    
}

//Play
if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),
   ButtonLeft_X[4]-sprite_get_xoffset(ButtonLeft_Sprite[4])-Leftmenu_width*MenuOffset[2],
   Leftmenu_top+ButtonLeft_Y[4]-sprite_get_yoffset(ButtonLeft_Sprite[4])-sprite_get_height(spr_playmovie_bar),
   ButtonLeft_X[4]+sprite_get_xoffset(ButtonLeft_Sprite[4])-Leftmenu_width*MenuOffset[2],
   Leftmenu_top+ButtonLeft_Y[4]+sprite_get_yoffset(ButtonLeft_Sprite[4]) )

){
  if(mouse_check_button_pressed(mb_left))&amp;&amp;(state!=ControlState.searching){
     with(obj_controller){ idling=0; }
     event_perform(ev_keypress, vk_enter);
  }
}


surface_reset_target();

//Draw the surface
if(state!=ControlState.searching){
 if(surface_exists(gui_surf)){draw_surface(gui_surf,0,0);}
}


//Reset rocket circle
draw_set_font(fnt_hd); draw_set_alpha(0.75);
draw_set_halign(fa_center); draw_set_valign(fa_middle);

if(delet_time&gt;=0){

 draw_pie(display_get_gui_width()/2,display_get_gui_height()/2+16,
 delet_time,1,c_white,64,0.75);

 draw_set_colour(c_black);
 draw_text(display_get_gui_width()/2,display_get_gui_height()/2+16,string(3-delet_pos));
 
}

draw_set_font(fnt_mario); draw_set_valign(fa_top); draw_set_alpha(1);


}

draw_set_colour(c_black); draw_set_halign(fa_left);

//infoalpha=scr_approach(infoalpha,0,0.2);

//draw_text_transformed(5,display_get_gui_height()-20,string(obj_mousechek.entitycollision)+" / "+string(Drag_id)+" / "+string(global.editing)
//,0.5,0.5,0);

draw_set_colour(c_white);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Search menu
/*
Just like in Super Mario Maker 2, a menu composed of wheels with all the items divided by type
the items are already sorted in the create event so now it's just a matter of putting it all together
*/

//Free all the surfaces and temp sprites when not needed and exit the event
if(state!=ControlState.searching){
   if(surface_exists(search_surf)){surface_free(search_surf);}
   if(sprite_exists(search_bkg)){sprite_delete(search_bkg);}
   if(sprite_exists(search_bgk_shaded)){sprite_delete(search_bgk_shaded);}
   exit;
}

//Draw the background-------------

/*
A screenshot of the current editor but blurred and with a white transparent layer, having the shader
run every frame took a toll on performance so I just create a new sprite from the previously taken sprite
*/

//Add shader to the sprite and make a new sprite
if(sprite_exists(search_bkg))&amp;&amp;(!sprite_exists(search_bgk_shaded)){

   var surf = surface_create(display_get_gui_width(),display_get_gui_height());
 
   surface_set_target(surf);
   
      shader_set(shd_guassian_blur);
      shader_set_uniform_f(usize,512/2,512/2,2)//width,height,radius
      
      draw_sprite_stretched(search_bkg,0,0,0,display_get_gui_width(),display_get_gui_height());
      
      shader_reset();
   
   surface_reset_target();
   
   
   
   search_bgk_shaded = 
       sprite_create_from_surface(surf,0,0,surface_get_width(surf),surface_get_height(surf),0,0,0,0);
   
   surface_free(surf);
   
   sprite_delete(search_bkg);
   
}

//Draw the new sprite
if(sprite_exists(search_bgk_shaded)){
    
    draw_sprite_stretched(search_bgk_shaded,0,0,0,display_get_gui_width(),display_get_gui_height());

}

draw_set_alpha(0.4);
draw_set_colour(c_white);
draw_rectangle(0,0,display_get_gui_width(),display_get_gui_height(),0);
draw_set_alpha(1);

//Draw the menu
if(!surface_exists(search_surf)){

   search_surf = surface_create(display_get_gui_width()*2,display_get_gui_height()*2);

}else{

   surface_set_target(search_surf);
   
   draw_clear_alpha(c_black,0);
   
   //Draw all the wheels
   for(var a=0; a&lt;max_pages; a++){
   
       //Interpolate scale
       if(search_page==a){ page_radius[a]=lerp(page_radius[a], 72*2, 0.2); var selected = true; }
       else{page_radius[a]=lerp(page_radius[a], (72-38)*2, 0.2); var selected = false;}
   
       //Wheel colour
       switch(pageType[a]){
              case 0:
                  draw_set_colour(rgb_to_bgr($D5ECF2));
              break;
              case 1:
                  draw_set_colour(rgb_to_bgr($F2D5F1));
              break;
              case 2:
                  draw_set_colour(rgb_to_bgr($D9F4D5));
              break;
              case 3:
                  draw_set_colour(rgb_to_bgr($F2F0D5));
              break;
       }
   
       //Get X and Y positions
       var X = surface_get_width(search_surf)/2 + pageX[a]*2 - page_offset;
       var Y = surface_get_height(search_surf)/2;
       
       draw_set_circle_precision(64);
       draw_circle(X, Y,page_radius[a],0);
       
       var SPRSCA = 2;
       var RECDIV = 2;
       
       //Draw a darker wheel when not selected and an arrow
       if(!selected){
           
          switch(pageType[a]){
              case 0:
                  draw_set_colour(rgb_to_bgr($93A2A5));
              break;
              case 1:
                  draw_set_colour(rgb_to_bgr($A545A4));
              break;
              case 2:
                  draw_set_colour(rgb_to_bgr($98AA94));
              break;
              case 3:
                  draw_set_colour(rgb_to_bgr($A5A493));
              break;
              } 
              
          draw_circle(X,Y,page_radius[a],0);
          
          
          draw_set_colour(rgb_to_bgr($5C1C1D));
          
          if(search_page&lt;a){
             draw_triangle(X+20,Y,X-12,Y-16,X-12,Y+16,0);
          }else{
             draw_triangle(X-20,Y,X+12,Y-16,X+12,Y+16,0);
          }
          
          var SPRSCA=1.75;
          var RECDIV=2.5;
       
       
       }
       
       //Draw icons
       for(var i=0; i&lt;array_length_2d(page_object,a); i++;){
       
           if(selected){ var dist = 30*2+(page_radius[a]-30*2)/2; }else{
              var dist = page_radius[a]-15*2;
           }
       
           var ICOX=lengthdir_x(dist ,360/array_length_2d(page_object,a)*i + 90);
           var ICOY=lengthdir_y(dist,360/array_length_2d(page_object,a)*i + 90);
          
           
           var SPR=global.spritemap[? page_object[a,i]];
           draw_set_colour(c_white);
           
           draw_rectangle(X + ICOX - 32/RECDIV-1-2,
           Y + ICOY - 32/RECDIV-1-2,
           X + ICOX + 32/RECDIV+2,
           Y + ICOY + 32/RECDIV+2,
           0);
       
           draw_sprite_ext(SPR,
           0,
           X + ICOX,
           Y + ICOY,
           SPRSCA,SPRSCA,0,c_white,1);
           
           //Select item
           
           /*if( point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),
                                  view_xview + X + ICOX - 32/RECDIV-1-2,view_yview + Y + ICOY - 32/RECDIV-1-2,
                                  view_xview + X + ICOX + 32/RECDIV+2,view_yview + Y + ICOY + 32/RECDIV+2
           )){
           
               search_pagepos=i;
               show_debug_message("yeah");
               
           }*/
               
           
       }
       
       //What to draw when selected
       if(selected){
       
              //Draw the lines to separate items
              switch(pageType[a]){
              case 0:
                  draw_set_colour(rgb_to_bgr($1FD0FE));
              break;
              case 1:
                  draw_set_colour(rgb_to_bgr($F164EE));
              break;
              case 2:
                  draw_set_colour(rgb_to_bgr($75F13B));
              break;
              case 3:
                  draw_set_colour(rgb_to_bgr($FFF234));
              break;
              }    
              
           
           for(var i=0; i&lt;array_length_2d(page_object,a); i++;){   
              
              draw_line_width(X,Y,X+floor(lengthdir_x(page_radius[a]-1 ,360/array_length_2d(page_object,a)*i +64.5))
              ,Y+floor(lengthdir_y(page_radius[a]+1,360/array_length_2d(page_object,a)*i + 64.5)),4);   
           
           }
           
           
          //Draw an item preview
          draw_circle(X,Y,page_radius[a]-38*2,0);
          
          draw_set_colour(c_white);
          
          var SPRSCALE=4;
          
          var BIGSP = global.spritemap[? page_object[a,search_pagepos]];
          draw_rectangle(X-sprite_get_width(BIGSP),Y+8-sprite_get_height(BIGSP)-1,
          X+sprite_get_width(BIGSP)+1,Y+8+sprite_get_height(BIGSP),0);
          
          draw_sprite_ext(BIGSP,0,
          X+1,Y+8,SPRSCALE,SPRSCALE,0,c_white,1);
          
          //Name tag
          var STRI = global.entityName[? page_object[a,search_pagepos]];
          
          var STRSCALE = 0.4;
          
          var STRY = Y+8-sprite_get_height(BIGSP)-18;
          
          draw_set_font(fnt_mario_big);
          draw_set_colour(rgb_to_bgr($5C1C1D));
          
          
          if(!is_undefined(STRI)){
          
          draw_rectangle(X-(string_width(STRI)*STRSCALE)/2,
          STRY+1,
          X+(string_width(STRI)*STRSCALE)/2-2,
          STRY+1-string_height(STRI)*(STRSCALE*2),0);
          
          draw_circle(X-(string_width(STRI)*STRSCALE)/2,
          STRY+1-string_height(STRI)*(STRSCALE),
          string_height(STRI)*(STRSCALE)+0.5,0);
          
          draw_circle(X+(string_width(STRI)*STRSCALE)/2,
          STRY+1-string_height(STRI)*(STRSCALE),
          string_height(STRI)*(STRSCALE)+0.5,0);
          
          }
          
          draw_triangle(X,STRY+6,X-4,STRY,X+4,STRY,0);
          
          
           draw_set_colour(c_white);
          draw_set_halign(fa_center); draw_set_valign(fa_bottom);
          draw_text_transformed(X,STRY-1,
          STRI,STRSCALE,STRSCALE,0);
          
          
       }
       
   
   }
   
   //Draw close button
   draw_set_colour(c_black);
   draw_set_alpha(0.4);
   
   draw_rectangle(surface_get_width(search_surf)-27*2-16,27*2-16+2,surface_get_width(search_surf)-27*2+16,27*2+16+2,0);
   draw_set_alpha(1);
   draw_rectangle(surface_get_width(search_surf)-27*2-16,27*2-16,surface_get_width(search_surf)-27*2+16,27*2+16,0);
   draw_set_colour(c_white);
   draw_line_width(surface_get_width(search_surf)-27*2-10,27*2-10,surface_get_width(search_surf)-27*2+10,27*2+10,4);
   draw_line_width(surface_get_width(search_surf)-27*2-10,27*2+10,surface_get_width(search_surf)-27*2+10,27*2-10,4);
   
   draw_set_circle_precision(24);
   
   surface_reset_target();
   
   draw_surface_ext(search_surf,0,0,0.5,0.5,0,c_white,1);
   
   
   page_target_offset=(128*2)*search_page;
   page_offset=lerp(page_offset,page_target_offset,0.5);
   
   

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room!=rm_editor){exit;}


depth=6;

draw_background(bkg_plains,view_xview-view_xview/10,room_height-background_get_height(bkg_plains));

var tabheight=36;
var tabwidth=33;

if(!global.closing){

//Draw the grid
if(!surface_exists(grid_surf)){
   grid_surf=surface_create(room_width,room_height);
}else{

   surface_set_target(grid_surf);
   
     for(var a=0; a&lt;room_width/16; a++){
     
         draw_set_alpha(0.25);         
         draw_set_colour(c_blue);
         
         if(16*a&gt;=view_xview)&amp;&amp;(16*a&lt;view_xview+view_wview){draw_line_width(16*a,view_yview,16*a,view_yview+view_hview,2);}                  
         
         draw_set_colour(c_white);
         
         draw_set_alpha(1);
     
     }
     
     
     
     for(var a=0; a&lt;room_height/16; a++){
     
         draw_set_alpha(0.25);         
         draw_set_colour(c_blue);
         
         if(16*a&gt;=view_yview)&amp;&amp;(16*a&lt;view_yview+view_hview){draw_line_width(view_xview,16*a,view_xview+view_wview,16*a,2);}                  
         
         draw_set_colour(c_white);
         
         draw_set_alpha(1);
     
     }
   
   surface_reset_target();
   
   if(global.draweditor){draw_surface(grid_surf,0,0);}

}



//Select logic
if(state==ControlState.normal){

 if(selected_id&gt;=0){

  if(enitityplace){

   //Get the id of what we want to place
   switch(global.selected_entity[selected_id]){
   
           case "Semis" :
           
                 
           
           break;
           
           default: 
           
           draw_sprite_ext(
           global.spritemap[?  ds_list_find_value(global.entity_list,selected_id)],0,
           device_mouse_x(0),device_mouse_y(0),1,1,0,c_white,1);
           
           break;
           
           case "Arrow" :
           
           draw_sprite_ext(
           spr_arrow,0,
           device_mouse_x(0),device_mouse_y(0),1,1,0,c_white,1);
           
           break;
           
           case "Bridge" :
           
           draw_sprite_ext(
           spr_bridge_base,0,device_mouse_x(0),device_mouse_y(0),1,1,0,c_white,1);
           draw_sprite_ext(
           spr_bridge_top,0,device_mouse_x(0),device_mouse_y(0)-16,1,1,0,c_white,1);
           
           draw_sprite_ext(
           spr_bridge_base,1,device_mouse_x(0)+16,device_mouse_y(0),1,1,0,c_white,1);
           draw_sprite_ext(
           spr_bridge_top,1,device_mouse_x(0)+16,device_mouse_y(0)-16,1,1,0,c_white,1);
           
           draw_sprite_ext(
           spr_bridge_base,2,device_mouse_x(0)+32,device_mouse_y(0),1,1,0,c_white,1);
           draw_sprite_ext(
           spr_bridge_top,2,device_mouse_x(0)+32,device_mouse_y(0)-16,1,1,0,c_white,1);
           
           break;
           
   
   }
   
   
   if(mouse_check_button(mb_left))&amp;&amp;(device_mouse_y(0)&gt;view_yview+Topmenu_height+4-Topmenu_height*MenuOffset[0])&amp;&amp;
   (device_mouse_x(0)&gt;view_xview+Leftmenu_width+4-Leftmenu_width*MenuOffset[2])&amp;&amp;
   (device_mouse_x(0)&lt;view_xview+view_wview-Rightmenu_width-6+Rightmenu_width*MenuOffset[1])
   &amp;&amp;(!instance_exists(obj_reset_rocket)&amp;&amp;!Dragging)&amp;&amp;(!EntitySelected){
   
      with(instance_create(device_mouse_x(0)-8,device_mouse_y(0)-8,obj_editor_entity)){
      
           Entity_id=ds_list_find_value(global.entity_list,other.selected_id); 
      
           //Special properties
           switch(Entity_id){
                                    
                  case "Arrow": UsesSprite=spr_arrow; x++; y++;  break;
                  case "Bridge": UsesSprite=spr_bridge_base; x++; y++; break;
                  
           }
      
           
           move_snap(16,16)
           other.Placing=1;//alarm[1]=1;
           other.LatestEntity=id;
      
      }
      
      
   
   }
 
  }


 }
 
 global.cursor=spr_cursor;
 
}else if(state=ControlState.erase){

   global.cursor=spr_eraser;

}

}else{ global.cursor=spr_cursor; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!keyboard_check(vk_alt)&amp;&amp;(room==rm_editor || room==rm_ingame)
&amp;&amp;(state!=ControlState.searching)){

obj_controller.fade_alpha=1;

if(room==rm_editor){
        
  if(state!=ControlState.searching){

    audio_sound_gain(global.makersong,0,0);
    audio_sound_gain(global.playsong,1,0);

    global.switchstate=0;
    room_set_width(rm_ingame, room_width);
    room_set_height(rm_ingame,room_height);

    room_goto(rm_ingame);
    
    alarm[1]=1;

  }


}
else if(room==rm_ingame){

    audio_sound_gain(global.makersong,1,0);
    audio_sound_gain(global.playsong,0,0);

    VX=view_xview;
    VY=view_yview;
    
    instance_activate_object(obj_mario_shadow);

    with(obj_mario_editor){
       x=obj_playerparent.x;
       y=obj_playerparent.y;
       visible=true;
    }
    
    with(obj_editor_entity){
       visible=true;
       if(tile_exists(tile)){ tile_set_visible(tile,true); }
    }

    room_goto(rm_editor);
    
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
