<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enitityplace=-1;

gui_surf=-4;

grid_surf=-4;

selected_id=-1;
w=0; wt=0;


instance_create(64,340,obj_mario_editor);

state=0;
enum ControlState { normal, erase }

VX=0;
VY=obj_controller.Window_H;

EntitySelected=-4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(gui_surf);surface_free(grid_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //Create the entities
    with(obj_editor_entity){
         
         child=instance_create(x+sprite_get_xoffset(global.spritemap[? Entity_id]),
         y+sprite_get_yoffset(global.spritemap[? Entity_id]),
         global.entitymap[? Entity_id]);
         
         switch(child.object_index){
         
                case obj_question_block :
                case obj_coin :
                case obj_inv_block :
                      child.image_speed=0.2;    
                break;
         
         }
         
         if(tile_exists(tile)){ tile_set_visible(tile,false); }
    
    }
    
    with(obj_mario_editor){
        instance_create(x,y,obj_playerparent);
        obj_camera.x=x;
       obj_camera.y=y;
       
       if(!collision_rectangle(bbox_left+1,bbox_bottom-2,bbox_right-1,room_height,obj_semisolid,0,0)){
          for(var a=-1; a&lt;2; a++){
              instance_create(x+16*a,bbox_bottom+9,obj_pinkplatform);
          }
       }
       
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room!=rm_editor){exit;}

EntitySelected=position_meeting(mouse_x,mouse_y,obj_editor_entity);

w=sin(wt*0.1);
wt++;

//Get the entity id
if(state==ControlState.normal){

 for(var a=0; a&lt;12; a++){

    var X=40+27*a;

    if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),
    view_xview[0]+X-10,view_yview[0]+20-12,
    view_xview[0]+X+11,view_yview[0]+20+12)){
    
       if(mouse_check_button_pressed(mb_left)){enitityplace=1; selected_id=a;}
    
    }

 }
 
}else{

  if(mouse_check_button(mb_left)){
  
     global.cursor_angle=45;
     
     if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),obj_mario_editor.bbox_left,obj_mario_editor.bbox_top,obj_mario_editor.bbox_right,obj_mario_editor.bbox_bottom)){
        with(obj_mario_editor){
             sprite_index=spr_mario_crouch;
             shake=3;
        }
     }else{
          with(obj_mario_editor){
             sprite_index=spr_mario_idle;
             shake=0;
        }
     }

     
      
     
     if(EntitySelected){
     
        with(instance_nearest(mouse_x,mouse_y,obj_editor_entity)){ 
        

         instance_destroy(); 
        
        }
     
     }
     
       
  }else if(mouse_check_button_released(mb_left)){
     global.cursor_angle=0;
     
        with(obj_mario_editor){
             sprite_index=spr_mario_idle;
             shake=0;
        }
     
     
  }


}
 
 
 
if(point_in_circle(device_mouse_x(0),device_mouse_y(0),view_xview+view_wview-16,view_yview+141,10)){
  
   if(mouse_check_button_pressed(mb_left)){state=!state global.cursor_angle=0;}

}


//Up
if(view_yview[view_current]&lt;64){view_yview[view_current]+=8; view_yview[view_current]=64;}

//Left border
if(view_xview[view_current]&lt;0){
view_xview[view_current]+=8; view_xview[view_current]=0;}

//Right border
if(view_xview[view_current]&gt;room_width-view_wview[view_current]){
view_xview[view_current]=room_width-view_wview[view_current];}

//Down
if(view_yview[view_current]&gt;room_height-view_hview[view_current]+8){
view_yview[view_current]-=8; view_yview[view_current]=room_height-view_hview[view_current]+8;}


view_yview=min(view_yview,room_height-view_hview-8);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(gui_surf);surface_free(grid_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enitityplace=-1;

gui_surf=-4;

grid_surf=-4;

selected_id=-1;

state=0;

if !view_enabled {


   view_visible[0]=true;
   view_wview[0]=obj_controller.Window_W;
   view_hview[0]=obj_controller.Window_H;
   view_wport[0]=obj_controller.Window_W;
   view_hport[0]=obj_controller.Window_H;
   view_yview[0]=VY;
   view_xview[0]=VX;
   view_enabled=true;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(room!=rm_editor){exit;}


if(!surface_exists(gui_surf)){
   gui_surf=surface_create(display_get_gui_width(),display_get_gui_height());
}else{


//Draw the HUD
surface_set_target(gui_surf);


//Shadows

var tabwidth=33;
var tabheight=39;

draw_primitive_begin(pr_trianglefan);
draw_vertex_colour(display_get_gui_width()-tabwidth-5,tabheight,c_black,0);
draw_vertex_colour(display_get_gui_width()-tabwidth,tabheight,c_black,.25);
draw_vertex_colour(display_get_gui_width()-tabwidth,display_get_gui_height(),c_black,.25);
draw_vertex_colour(display_get_gui_width()-tabwidth-5,display_get_gui_height(),c_black,0);

draw_primitive_end();



var tabheight=36;

draw_primitive_begin(pr_trianglefan);
draw_vertex_colour(0,tabheight,c_black,0.25);
draw_vertex_colour(display_get_gui_width()-tabwidth,tabheight,c_black,0.25);

draw_vertex_colour(display_get_gui_width()-tabwidth,tabheight+5,c_black,0);
draw_vertex_colour(0,tabheight+5,c_black,0);
draw_primitive_end();



draw_set_colour(c_white);
draw_set_alpha(0.4);
draw_rectangle(0,0,display_get_gui_width(),tabheight,0);


draw_set_alpha(1);
draw_line_width(0,tabheight,display_get_gui_width(),tabheight,1);




//Top bar


//Draw icons
for(var a=0; a&lt;12; a++){
  
    var X=40+27*a;
    if(selected_id==a){ var Y=w; }else{ var Y=0; }

    draw_sprite_ext(spr_objectUI,0,X,21,1,1,0,c_black,0.25);
    
    draw_sprite(spr_objectUI,
    global.entityclass[? global.selected_entity[a]],X,20);
    
    draw_sprite(global.spritemap[? global.selected_entity[a]],0,X+1,21+Y);
    
}

draw_sprite_ext(spr_magnUI,0,
display_get_gui_width()-17,21,1,1,0,c_black,0.25);


draw_sprite(spr_magnUI,0,
display_get_gui_width()-17,20);




//Right side
draw_set_colour(c_white);
draw_set_alpha(0.4);
draw_rectangle(display_get_gui_width()-tabwidth,tabheight+3,display_get_gui_width(),display_get_gui_height(),0);

draw_set_alpha(1);

draw_sprite_ext(spr_menu_UI,0,display_get_gui_width()-16,51,1,1,0,c_black,0.25);
draw_sprite(spr_menu_UI,0,display_get_gui_width()-16,50);


draw_sprite_ext(spr_robotUI,0,display_get_gui_width()-16,79,1,1,0,c_black,0.25);
draw_sprite(spr_robotUI,0,display_get_gui_width()-16,78);


draw_sprite_ext(spr_rubberUI,0,display_get_gui_width()-16,141,1,1,0,c_black,0.25);
draw_sprite(spr_rubberUI,0,display_get_gui_width()-16,140);


draw_sprite_ext(spr_undodog_UI,0,display_get_gui_width()-16,169,1,1,0,c_black,0.25);
draw_sprite(spr_undodog_UI,0,display_get_gui_width()-16,168);




surface_reset_target();


draw_surface(gui_surf,0,0);


}

draw_text(5,80,"Press ENTER#to play#"+string(EntitySelected));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room!=rm_editor){exit;}

depth=6;
//draw_background_tiled(background0,0,room_height-background_get_height(background0));
draw_background(background0,view_xview-view_xview/10,room_height-background_get_height(background0));

var tabheight=36;
var tabwidth=33;


//Draw the grid
if(!surface_exists(grid_surf)){
   grid_surf=surface_create(room_width,room_height);
}else{

   surface_set_target(grid_surf);
   
     for(var a=0; a&lt;room_width/16; a++){
     
         draw_set_alpha(0.25);         
         draw_set_colour(c_blue);
         
         if(16*a&gt;=view_xview)&amp;&amp;(16*a&lt;view_xview+view_wview){draw_line_width(16*a,view_yview,16*a,view_yview+view_hview,2);}                  
         
         draw_set_colour(c_white);
         
         draw_set_alpha(1);
     
     }
     
     
     
     for(var a=0; a&lt;room_height/16; a++){
     
         draw_set_alpha(0.25);         
         draw_set_colour(c_blue);
         
         if(16*a&gt;=view_yview)&amp;&amp;(16*a&lt;view_yview+view_hview){draw_line_width(view_xview,16*a,view_xview+view_wview,16*a,2);}                  
         
         draw_set_colour(c_white);
         
         draw_set_alpha(1);
     
     }
   
   surface_reset_target();
   
   draw_surface(grid_surf,0,0);

}



//Select logic
if(state==ControlState.normal){

 if(selected_id&gt;=0){

  if(enitityplace){

   //Get the id of what we want to place
   switch(global.selected_entity[selected_id]){
   
           case "Semis" :
           
                 
           
           break;
           
           default: 
           
           draw_sprite_ext(
           global.spritemap[? global.selected_entity[selected_id]],0,
           device_mouse_x(0),device_mouse_y(0),1,1,0,c_white,1);
           
           break;
   
   }
   
   
   if(mouse_check_button(mb_left))&amp;&amp;(device_mouse_y(0)&gt;view_yview+tabheight)&amp;&amp;
   (device_mouse_x(0)&lt;view_xview+view_wview-tabwidth){
   
      with(instance_create(device_mouse_x(0)-8,device_mouse_y(0)-8,obj_editor_entity)){
      
           Entity_id=global.selected_entity[other.selected_id];
           move_snap(16,16)
      
      }
   
   }
 
  }


 }
 
 global.cursor=spr_cursor;
 
}else if(state=ControlState.erase){

   global.cursor=spr_eraser;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!keyboard_check(vk_alt)){

if(room==rm_editor){
        
    room_set_width(rm_ingame, room_width);
    room_set_height(rm_ingame,room_height);

    room_goto(rm_ingame);
    
    alarm[1]=1;


}
else if(room==rm_ingame){

    VX=view_xview;
    VY=view_yview;

    with(obj_mario_editor){
       x=obj_playerparent.x;
       y=obj_playerparent.y;
       visible=true;
    }
    
    with(obj_editor_entity){
       if(tile_exists(tile)){ tile_set_visible(tile,true); }
    }

    room_goto(rm_editor);
    
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
