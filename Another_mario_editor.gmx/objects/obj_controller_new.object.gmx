<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_controller</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Electro Rocket Engine controller object

/*
This script is so messy but I will reorganize it later maybe
*/

global.stream=-1;

proceed=0;

//Debug tabs
tab_number=2;
A_X[tab_number]=0; A_Y[tab_number]=0;
XM[tab_number]=0; YM[tab_number]=0;
XO[tab_number]=0; YO[tab_number]=0;
FinalW[tab_number]=0;
Moving[tab_number]=0;
Open[tab_number]=0;
msg=0;
arrayname="";
vartype=0;
varYoff=0;
PlayerTag=obj_playerparent;

ObjectTag=-4;
Count=0;

A_Y[1]=60;
A_X[2]=300;



screen=0;

console_allow=1;

shock_surf=-1;

id_mouse=-1;
OBJ_STR=0;
de_image=0;
checkMouse=0;

frames=0;
global.gamepadD="";
global.weirdcontroller=1;

small_ver="v0.1.5 DEV BUILD";
version="Rocket Hat#v0.1.5#[DEV BUILD]";

game_version="0.1.5";
play_verssion="0";
//0 - W - E

//version="";

latestFile=0;
//Sin
wave=0;
wavetime=0;

global.Cutscenescript=-1;
global.Argument[7]=0;

global.lastbutton=-1;
global.maxworlds=4;
global.world=0;

global.room_menupos=0;

fps_show=0
//The variable for the screenshot to save for pausing
screenface      =0;

//fade variable
fade            =0;
fade_alpha      =1;
Room_goto       =0;

//Leve
global.lockedin=false;
global.currentlevel=-1;

//Sprite transition
transition_sprite = spr_pin;
transition_yoffset = 0;
transition_border = spr_darkness_test;

//if you can pause
canpause        =0;

//if pausign
pause           =0;
fps_show        =0;
//Cutscene variable
global.cutscene =0;
drawbars=1;
Cut_Yoffset=0;
canskip=0;
//debug mode
global.debug    =0;


global.keys=0;
//Result screen
global.result_deaths=0;
global.result_moons=0;
global.result_time=0;
global.result_emerald=0;
global.result_document=0;
global.result_medal=0;
global.resultscreen=spr_player_crouch;
global.newPB=0;
global.level_unlocked=0;
global.level_unlocked_id=0;


//Farming prevention &amp; Co.
global.newcoins=0;
global.OGcoins=0;

//Options
music_T    =1;
FV =0;

Window_S        =0;
music_V         =1;
sfx_V           =1;
global.mastervolume=1;
global.Text_S          ="Normal";
Text_N          =1;
speedrun_mode   =0;
global.game_speed     =1
UI_look         =0;
global.quality  =1;


//Checkpoint variables
checkpointX     =0;
checkpointY     =0;
checkpointR     =room;

//Hub original positions
OG_hub_X        =0;
OG_hub_Y        =0;
OG_hub_R        =room;

//coming from another room?
fromroom        =0;

//Destination
destination_id  =-1;

//file selected
global.file     =0;
global.levelroom=0;
//Game width / heigh
//384 216
//480 270
Window_W = 480;
Window_H = 270;

sc_can   = 1;
sc_amt   = 0;
sc_dest  = 0;
ViewXoffset=0;
ViewYoffset=0;
//Other
fullscreen = false;
message="";
cantalk=1;
vSync=1;
Device=0;
debug_info=0;
debug_hitbox=0;

//set background array
BKG_H[7]=0; 
BKG_V[7]=0;

//Inputs--------
global.inputmode=0;
Input_alpha=0;
InputAlpha=0;
global.gamepadsprite=spr_gamepad_controls_xbox;

circleScale=0;

//Tutorial
firstDocmenu=0;


global.cube_idle=-1;

/*INPUT LIST
** Up            
** Down            
** Left
** Right
** Skin R
** Skin L
** Start
** Jump/OK
** Sprint/Action
** Select
*/

enum input {
   up,       //UP
   down,     //DOWN
   left,     //LEFT
   right,    //RIGHT
   action0,  //action 1(jump)
   action1,  //action 2(sprint)
   action2,  //action 3
   start,    //Start
   select,   //Select
   shoulder0,//Shoulder L
   shoulder1,//Shoulder R
}

InputN[0]="Up";
InputN[1]="Down";
InputN[2]="Left";
InputN[3]="Right";
InputN[4]="Jump";
InputN[5]="Dash";
InputN[6]="Other actions";
InputN[7]="Start";
InputN[8]="Select";
InputN[9]="Shoulder Left";
InputN[10]="Shoulder Right";

global.buttonID[0,0]=gp_padu;
global.buttonID[1,0]=gp_padd;
global.buttonID[2,0]=gp_padl;
global.buttonID[3,0]=gp_padr;
global.buttonID[4,0]=gp_start;
global.buttonID[5,0]=gp_select;
global.buttonID[6,0]=gp_stickl;
global.buttonID[7,0]=gp_stickr;
global.buttonID[8,0]=gp_shoulderl;
global.buttonID[9,0]=gp_shoulderr;
global.buttonID[10,0]=gp_shoulderlb;
global.buttonID[11,0]=gp_shoulderrb;
global.buttonID[12,0]=gp_face1;
global.buttonID[13,0]=gp_face2;
global.buttonID[14,0]=gp_face3;
global.buttonID[15,0]=gp_face4;

global.buttonID[0,1]=gp_face1;
global.buttonID[1,1]=gp_face2;
global.buttonID[2,1]=gp_face3;
global.buttonID[3,1]=gp_face4;
global.buttonID[4,1]=gp_shoulderl;
global.buttonID[5,1]=gp_shoulderr;
global.buttonID[6,1]=gp_shoulderlb;
global.buttonID[7,1]=gp_shoulderrb;
global.buttonID[8,1]=gp_select;
global.buttonID[9,1]=gp_start;
global.buttonID[10,1]=gp_stickl;
global.buttonID[11,1]=gp_stickr;
global.buttonID[12,1]=gp_padu;
global.buttonID[13,1]=gp_padd;
global.buttonID[14,1]=gp_padl;
global.buttonID[15,1]=gp_padr;
//global.buttonID[16,1]=gp_padr;
global.buttonID[17,1]=gp_select;
global.buttonID[18,1]=gp_start;

//Set fonts
global.neutral_numbers = font_add_sprite(spr_neutral_numbers,ord("0"),1,1);
global.crystal_numbers = font_add_sprite(spr_crystal_numbers,ord("0"),0,0);
global.white_numbers = font_add_sprite(spr_white_numbers,ord("0"),0,0);
global.drawing_font = font_add_sprite(spr_drawing_font,ord("!"),1,1);
global.info_font = font_add_sprite(spr_dialogue_font,ord("!"),1,1);
global.dialogue_font = font_add_sprite(spr_dialogue_font,ord("!"),0,-6);
global.outline_font = font_add_sprite(spr_white_outline_font,ord("!"),1,1);
global.outline_font_sep = font_add_sprite(spr_white_outline_font,ord("!"),0,-5);
global.black_outline_font = font_add_sprite(spr_black_outline_font,ord("!"),1,0);

//Debug menu stuff
Room_menu     =0;
Menupage      =0;
Levelpage     =0;

pause_surf=0;

//Window hook commands
window_command_hook(window_command_close);
//window_set_background_redraw(true);


enum floormaterial {
     stone,
     wood,
     matress
}

//alarm[10]=1;

//---------INPUT LIST---------//
//This is just for reference
/*
F1=112  
F2=113
F3=114
F4=115
F5=116
F6=117
F7=118
F8=119
F9=120
F10=121
F11=122
F12=123
Pause=???
Print=0
Canc=46
top left pointing arrow=36
pag up=33
pag down=34
end=35
\=220
1=49
2=50
3=51
4=52
5=53
6=54
7=55
8=56
9=57
0=48
'=219
ì=221
Backspace=8
Num lock = 144
/=111
*=106
-(numpad)=109
+(numpad)=107
Enter=13
numpad0=45
numpad1=35
numpad2=40
numpad3=34
numpad4=37
numpad5=12
numpad6=39
numpad7=36
numpad8=38
numpad9=33
numpad . =46
up=38
down=40
right=39
left=37
Lctrl=162
Rctrl=163
shift=16
TAB=9
Lock=20
&lt;=90
Q=49
W=87
E=69
R=82
T=84
Y=89
U=85
I=73
O=79
P=80
è=186
+=187
A=65
S=83
D=68
F=70
G=71
H=72
J=74
K=75
L=76
ò=192
à=222
ù=191
Z=90
X=88
C=67
V=86
B=66
N=78
M=77
,=188
.=190
-=189
the one near alt gr(:P) = 93
alt gr=165
alt = 164
home = 91
space = 32
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game information
global.datamap=ds_map_create();

//Tell if the mouse is in a debug menu to ignore other mouse inputs
global.mastermenu=0;

//RPC variables
succes=0;
global.dis_state="Starting game";
global.status="";
ex=unix_timestamp();

status="";
file="";
dis_icon="emerald";

//World information
world_numb      =5;
global.worldname[world_numb]=0;

//World names
global.worldname[0]="Abandoned Dungeon";
global.worldname[1]="Corrosive Sewers";
global.worldname[2]="Illusive Forest";
global.worldname[3]="Asphyxiating Facility";
global.worldname[4]="Drowsy Moon-mountain";
global.worldname[5]="Silly Circus";

//Last and first level of each world
levelfirst[0]   =0;
levellast[0]    =1;


//Number of total levels in game
level_numb      =8;

//Level type
// 0 - document and emerald
// 1 - only document
// 2 - only emerald
// 3 - nothing
global.level_type[level_numb]=0;

//Level name
global.levelname[level_numb]="";

for(var a=0; a&lt;level_numb+1; a++){
    global.levelname[a]="";
}

global.levelname[0]="Welcome to the dungeon";
global.levelname[1]="Dangerous chambers";


//Other amounts
max_documents   =2;
max_emeralds    =2;
max_achievements=6;
max_skins=3;


//Used to know if you bought a costume after leaving a shop
global.costume_leave=0;


//Use this to edit how the game shows achievements
// 0-normal  1-hidden
ach_state[6]=0;
ach_state[1]=1;

//More achievemtent instrutions
ach_instruction[6]=0;
ach_name[6]=0;

ach_name[0]="Piggy-bank";
ach_name[1]="Endless revenge";
ach_name[2]="Jewelry passionate 1";
ach_name[3]="Art collector 1";
ach_name[4]="Runner 1";
ach_name[5]="Spendthrift 1";

ach_instruction[0]="Collect 50 moons";
ach_instruction[1]="Defeat World 1's boss"
ach_instruction[2]="Unlock Remix 1";
ach_instruction[3]="Collect all documents in World 1";
ach_instruction[4]="Get gold in all levels in World 1";
ach_instruction[5]="Buy all costumes in World 1";

//Initialize medal variables
scr_initialize_medals();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Application surface
/*_uniColor = shader_get_uniform(shdrColorOverlay, "u_color");
_color[0]    = 1.0;
_color[1]    = 1.0;
_color[2]    = 1.0;
_color[3]    = 0.5;
image_speed=0.2;*/

//application_surface_draw_enable(false);

// Create Event

surface_resize(application_surface,Window_W*2,Window_H*2);

sprite=sprite_create_from_surface(application_surface,0,0,surface_get_width(application_surface),
      surface_get_height(application_surface),0,1,0,0);
_uniUV         = shader_get_uniform(shd_rainbow, "u_uv");
_uniTime       = shader_get_uniform(shd_rainbow, "u_time");
_uniSpeed      = shader_get_uniform(shd_rainbow, "u_speed");
_uniSection    = shader_get_uniform(shd_rainbow, "u_section");
_uniSaturation = shader_get_uniform(shd_rainbow, "u_saturation"); 
_uniBrightness = shader_get_uniform(shd_rainbow, "u_brightness");
_uniMix        = shader_get_uniform(shd_rainbow, "u_mix");

_time  = 0;
_speed = 1.0;
_section = 0.5;
_saturation = 0.7;
_brightness = 0.8;
_mix = 0.5;


COLOUR_FOR_NO_MOVE= make_colour_rgb(127,127,255)

uTime = shader_get_uniform(shd_heat, "Time");
uxSpeed = shader_get_uniform(shd_heat, "xSpeed");
uxFreq = shader_get_uniform(shd_heat, "xFreq");
uxSize = shader_get_uniform(shd_heat, "xSize");
uTexel = shader_get_uniform(shd_heat, "Texel");

// name of what you want it to be called in the shader
distortion_stage = shader_get_sampler_index(shader_fullscreen, "distortion_texture_page") 
surface_distort=-1;
waveX=0;
waveY=0;



enum SurfaceState {
    normal, blurH, blurV, grayscale, scketh, invert, scanlines, mosaic, emboss, wave
}

Surface_state=SurfaceState.normal;

finalsurf=-1;

application_surface_draw_enable(false)

global.unshade=0;


uni_resolution_hoz = shader_get_uniform(shd_gaussian_horizontal,"resolution");
uni_resolution_vert = shader_get_uniform(shd_gaussian_vertical,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_blur_amount_hoz = shader_get_uniform(shd_gaussian_vertical,"blur_amount");
uni_blur_amount_vert = shader_get_uniform(shd_gaussian_horizontal,"blur_amount");
var_blur_amount = 1.0;

uni_time = shader_get_uniform(shd_grayscale,"time");
uni_greyscale_fade = shader_get_uniform(shd_grayscale,"fade");
uni_mouse_pos = shader_get_uniform(shd_grayscale,"mouse_pos");
uni_resolution = shader_get_uniform(shd_grayscale,"resolution");
var_greyscale_fade = 1;
var_time_var = 0;
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_pixel_amount = shader_get_uniform(shd_mosaic, "pixel_amount");
var_pixel_amount = 200.0;


uni_wave_amount = shader_get_uniform(shd_wave,"wave_amount");
var_wave_amount = 20; //higher = more waves

uni_wave_distortion = shader_get_uniform(shd_wave,"wave_distortion");
var_wave_distortion = 60; //higher = less distortion

uni_wave_speed = shader_get_uniform(shd_wave,"wave_speed");
var_wave_speed = 2.0; //higher = faster

if !shader_is_compiled(shd_bright_contrast)
|| !shader_is_compiled(shd_emboss)
|| !shader_is_compiled(shd_gaussian_horizontal) 
|| !shader_is_compiled(shd_gaussian_vertical)
|| !shader_is_compiled(shd_grayscale)
|| !shader_is_compiled(shd_invert) 
|| !shader_is_compiled(shd_LED)
|| !shader_is_compiled(shd_magnify)
|| !shader_is_compiled(shd_mosaic) 
|| !shader_is_compiled(shd_posterization) 
|| !shader_is_compiled(shd_ripple)
|| !shader_is_compiled(shd_scanlines) 
|| !shader_is_compiled(shd_sepia)
|| !shader_is_compiled(shd_shockwave)
|| !shader_is_compiled(shd_sketch)
|| !shader_is_compiled(shd_thermal)
|| !shader_is_compiled(shd_wave)
|| !shader_is_compiled(shd_radial_blur) 
|| !shader_is_compiled(shd_refraction)
|| !shader_is_compiled(shd_white_sprite)
|| !shader_is_compiled(shd_rainbow)
|| !shader_is_compiled(shd_heat)
|| !shader_is_compiled(shd_bed)
{
   global.unshade=1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Costume variables


enum Costumestate{

     idle,idle2,idle3,idle4,walk,sprint,jump,fall,roll,
     crouch_idle,crouch_walk,crouch_sprint,death,pull

}

//global.current_modcostume=0;

global.actiontype[0]="IDLE";
global.actiontype[1]="IDLE 2";
global.actiontype[2]="IDLE 3";
global.actiontype[3]="IDLE 4";
global.actiontype[4]="WALK";
global.actiontype[5]="SPRINT";
global.actiontype[6]="JUMP";
global.actiontype[7]="FALL";
global.actiontype[8]="ROLL";
global.actiontype[9]="CROUCH IDLE";
global.actiontype[10]="CROUCH WALK";
global.actiontype[11]="CROUCH SPRINT";
global.actiontype[12]="DEATH";
global.actiontype[13]="PULL";

global.costume_sprite[14,0]=-1;
global.costume_name[0]="No name";
global.spritename[0,0]="No name";
global.stopframe[0]=-1;
global.loopframe[0]=-1;
global.inipath[0]="No path found";
global.ininame[0]="";

global.costume_number=0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit the game
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset fade
fade=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset cutscene
fade=0;
canskip=0;
canpause=1;
script_execute(global.Cutscenescript
      ,global.Argument[0]
      ,global.Argument[1]
      ,global.Argument[2]
      ,global.Argument[3]
      ,global.Argument[4]
      ,global.Argument[5]
      ,global.Argument[6]
      ,global.Argument[7]);

with(obj_playerparent){
     state=Playerstate.idle;
     Control=true;
     canmove=1;
     obj_camera.Object=id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply settings

window_set_fullscreen(fullscreen);

event_user(0);

window_center();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset message
message="";
cantalk=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset fromroom variables
fromroom = 0;

//Reset destination variable
destination_id = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to a specific room
room_goto(Room_goto);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset gamepad vibration

//Going through all the connected gamepads
for (var g=0; g&lt;12; g++) {
if(gamepad_is_connected(g)){
gamepad_set_vibration(g,0,0);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the game
fade = 1;
fade_alpha=1;
alarm[2]=1;
if(global.firstopen){
Room_goto=rm_title_screen;
}
else{
Room_goto=rm_firstcontrols;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.mastermenu=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller logic

//Check if we're trying to close the window
if (window_command_check(window_command_close)) {

    show_debug_message("Close attempted"); 
    
    global.cutscene=2;
   
   with(obj_playerparent){ 
   Control=false;
   
   if(instance_exists(obj_hubcontrol)){
      global.datamap[? "Map_room"]=room;
   }
   
   }
   fade=1;
   scr_save_filemap(global.file);
   alarm[9]=20;

}

//RPC----------------------
//Rich presence setup
np_initdiscord(
"832651537583046688",
0,
0);

//Set time
np_setpresence_timestamps(
ex
,0,1);

//Descriptions
if(!instance_exists(obj_main_menu_controller))
&amp;&amp;(!instance_exists(obj_title_controller))
&amp;&amp;(!instance_exists(obj_firstcontrols_controller))
&amp;&amp;(!instance_exists(obj_debug_room_controller)){

   file="File "+string(global.file+1)+" '"+string(global.datamap[? "Filename"])+"' | ";
   
   status="📄"+string(global.datamap[? "Document_amount"])+"/"+string(max_documents+1)+
   " 💎"+string(global.datamap[? "Emerald_amount"])+"/"+string(max_emeralds+1)+
   " 👕"+string(global.datamap[? "Costume_amount"])+"/"+string(max_skins)+
   " 💀"+string(global.datamap[? "Deaths"]);


}
else{
   file="";
   status=global.status;
}

//Set the status
np_setpresence(
status
,
string(file)+string(global.dis_state),
dis_icon,
0);

//Update the status
succes=np_update();

//Set up the audio stuff
var num = audio_get_listener_count();
 for( var i = 0; i &lt; num; i++;)
    {
    var info = audio_get_listener_info(i);
    audio_set_master_gain(info[? "index"], global.mastervolume);
    ds_map_destroy(info);
    }

FV=lerp(FV,music_T,0.05);

audio_sound_gain(global.stream,FV,0);

//Cutscene skip
if(global.cutscene==1)&amp;&amp;(canskip){

   if(scr_input_check(input.select))&amp;&amp;(!obj_pause_controller.pause){
   
      alarm[7]=30;
      canpause=0;
      fade=1;
      fade_alpha=1;      
      global.cutscene=0;
      
   }
}

//Lock the player
if(fade_alpha&gt;0.4){
   with(obj_playerparent){Vsp_final=0; grav=0; hspeed=0;}
}

//Inputmode
if(!global.inputmode){

for(var a=0; a&lt;gamepad_get_device_count(); a++){
    
    if(gamepad_button_check_pressed(a,gp_face1))
    ||(gamepad_button_check_pressed(a,gp_face2))
    ||(gamepad_button_check_pressed(a,gp_face3))
    ||(gamepad_button_check_pressed(a,gp_face4))
    ||(gamepad_button_check_pressed(a,gp_padd))
    ||(gamepad_button_check_pressed(a,gp_padu))
    ||(gamepad_button_check_pressed(a,gp_padr))
    ||(gamepad_button_check_pressed(a,gp_padl))
    ||(gamepad_button_check_pressed(a,gp_select))
    ||(gamepad_button_check_pressed(a,gp_start))
    ||(gamepad_button_check_pressed(a,gp_shoulderl))
    ||(gamepad_button_check_pressed(a,gp_shoulderr))
    ||(gamepad_button_check_pressed(a,gp_shoulderlb))
    ||(gamepad_button_check_pressed(a,gp_shoulderrb))
    ||(gamepad_axis_value(a,gp_axislh)&gt;0.2)
    ||(gamepad_axis_value(a,gp_axislh)&lt;-0.2)
    ||(gamepad_axis_value(a,gp_axislv)&gt;0.2)
    ||(gamepad_axis_value(a,gp_axislv)&lt;-0.2){
    
       
          global.inputmode=1;
          InputAlpha=2;
       }
       
    }

}
else{

 if(keyboard_check_pressed(vk_anykey)){
   if(global.inputmode){
          global.inputmode=0;
          InputAlpha=2;
   }
 }
 
}

//Change gamepad sprite
global.weirdcontroller=0;
for(var a=0; a&lt;gamepad_get_device_count(); a++){
if(gamepad_is_connected(a)){
   
   switch(gamepad_get_description(a)){
   
          case "Xbox 360 Controller (XInput STANDARD GAMEPAD)": 
          global.gamepadsprite=spr_gamepad_controls_xbox; 
          global.gamepadD="XInput STANDARD GAMEPAD";
          global.weirdcontroller=0;
          break;
          
          case "Nintendo Switch Pro Controller": 
          global.gamepadsprite=spr_gamepad_controls_pro; 
          global.gamepadD="Pro Controller";
          global.weirdcontroller=1;
          break;
          
          default: global.weirdcontroller=0; break;
          
          
   }
}else{ global.gamepadD="None"; }

}



if(instance_exists(obj_pause_controller)){

with(obj_pause_controller){other.sc_can=pause;}

}




if !view_enabled
    {
    view_visible[0] = true;
    view_enabled = true;
    }
   
var ratio;
 ratio = view_hport[view_current] / view_wport[view_current];
 view_wview[view_current] = (Window_W*2+sc_amt);
 view_hview[view_current] = (Window_H*2+sc_amt*ratio/1.25);

if(sc_can==0){ sc_amt=lerp(sc_amt,sc_dest,0.1); }

ViewXoffset=(view_wview-Window_W*2)/2;
ViewYoffset=(view_hview-Window_H*2)/2;

view_xview-=ViewXoffset;
view_yview-=ViewYoffset;

//Cap coins
//if(global.datamap[? "Moons"]&gt;9999){global.datamap[? "Moons"]=9999;}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check achievements and time

if(ds_exists(global.datamap,ds_type_map)){




//Calculate file time
if(room&gt;=rm_hub_dungeon)||(room==rm_costumeshop)
||(room==rm_resultscreen)||(room==rm_levelshow){

   global.datamap[? "Filetime"]+=1000/room_speed*global.game_speed;
   
   global.datamap[? "MSeconds"]+=1000/room_speed*global.game_speed;
   
   //Moons
   if(global.datamap[? "Achievement_0"]==0){

     if(global.datamap[? "Moons"]&gt;50){
   
      global.datamap[? "Achievement_0"]=1;

      scr_save_filemap(global.file);   
      
      with(instance_create(0,0,obj_advice)){ Sprite=spr_achievement_icon; Image=1; message="Achievement 1 unlocked - "+other.ach_name[0]; } 
   
     }
   
   }
   
}

 if(global.datamap[? "MSeconds"]&gt;=1000){
   
      global.datamap[? "Seconds"]++;
      global.datamap[? "MSeconds"]-=1000;
      
      if(global.datamap[? "Seconds"]&gt;=60){
         
         global.datamap[? "Minutes"]++;
         global.datamap[? "Seconds"]-=60;
         
         if(global.datamap[? "Minutes"]&gt;=60){
         
            global.datamap[? "Hours"]++;
            global.datamap[? "Minutes"]-=60;
         
         }
      
      }
   
 }

 
 }
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug commands
//Restart the game (ALT+R)
if(keyboard_check_pressed(ord("R"))){ 
   
    audio_stop_all();
    with(obj_hud){instance_destroy();}
    with(obj_timercontroller){instance_destroy();}
    room_goto(rm_initialize);
    message = "Game restarted!";
    cantalk=0;
    
    global.dis_state="Starting game";
    global.status="";
    status="";
    file="";
    dis_icon="emerald";

    
    ///Go to the game
fade = 1;
fade_alpha=1;
alarm[2]=1;
if(global.firstopen){
Room_goto=rm_title_screen;
}
else{
Room_goto=rm_firstcontrols;

}
    event_user(1);
    alarm[4]=90;
    
    
}

//Toggle fullscreen
else if(keyboard_check_pressed(vk_enter)){ 
   
    fullscreen = !fullscreen
    if(fullscreen){
       message="fullscreen ON";
    }
    else{
       message="fullscreen OFF";
    }
    event_user(0);
    cantalk=0;
    alarm[4]=90;
    
}

//Vsync
else if(keyboard_check_pressed(ord("V"))){

    vSync=!vSync;
    
    if(vSync){
    message = "VSync ON";
    }
    else{
    message = "VSync OFF";
    }
    event_user(0);
    cantalk=0;
    alarm[4]=90;
}
//Screenshot
else if(keyboard_check_pressed(ord("S"))){
     message="";
     
     while( file_exists(
     working_directory+"Screenshots/screen"+string(screen)+".png")){screen++;}
          
     screen_save(working_directory+"Screenshots/screen"+string(screen)+".png");
     
     message="Screenshot taken";
     cantalk=0;
     alarm[4]=90;
}
//Effects
else if(keyboard_check_pressed(ord("E"))){
     global.effects=!global.effects;
     
     if(global.effects){
        message = "Effects ON";
     }
     else{
        message = "Effects OFF";
     }
     cantalk=0;
     alarm[4]=90;
}

//Effects
else if(keyboard_check_pressed(ord("F"))){
     fps_show=!fps_show;
     
     if(!fps_show){message="";}
}


//Window sizes
else if(keyboard_check_pressed(ord("1"))){
 
     Window_S=0;
     message = "Window size x1";
     event_user(0);
     alarm[4]=90;
     cantalk=0;
}

else if(keyboard_check_pressed(ord("2"))){
 
     Window_S=1;
     message = "Window size x2";
     event_user(0);
     alarm[4]=90;
     cantalk=0;
}

else if(keyboard_check_pressed(ord("3"))){
 
     Window_S=2;
     message = "Window size x3";
     event_user(0);
     alarm[4]=90;
     cantalk=0;
}

else if(keyboard_check_pressed(ord("4"))){
 
     Window_S=3;
     message = "Window size x4";
     event_user(0);
     alarm[4]=90;
     cantalk=0;
}
else if(keyboard_check_pressed(vk_f1)){
     event_user(3);
     message = "Controls set to default";
     alarm[4]=90;
}
//End game
else if(keyboard_check_pressed(vk_f5)){
   global.cutscene=true;
   
   with(obj_playerparent){ 
   Control=false;
   
   if(instance_exists(obj_hubcontrol)){
      global.MapRoom[global.file]=room;
   }
   
   }
   fade=1;
   //scr_save_file(global.file);
   alarm[9]=30;
}


if(console_allow){//----------------------------THESE WON'T BE ACCESSIBLE IN PUBLIC RELEASES

if(keyboard_check_pressed(ord("M"))){
   checkMouse=!checkMouse;
} 

if(keyboard_check_pressed(ord("D"))){
   room_goto(rm_roomdebug);
} 

else if(keyboard_check_pressed(ord("A"))){
   room_goto(rm_spritedebug);
} 

else if(keyboard_check_pressed(ord("N"))){
   global.cutscene++
   if(global.cutscene&gt;2){global.cutscene=0;}
} 



//Move to previous room
else if(keyboard_check_pressed(ord("X"))){

    if(room_exists(room_previous(room))){ room_goto_previous(); }
    fade_alpha=1;
    obj_pause_controller.pause=0;
    message = "Gone to the previous room";
    cantalk=0;
    alarm[4]=90;
}

//Move to next room
else if(keyboard_check_pressed(ord("Z"))){

    if(room_exists(room_next(room))){ room_goto_next(); }
    fade_alpha=1;
    obj_pause_controller.pause=0;
    message = "Gone to the next room!";
    cantalk=0;
    alarm[4]=90;
}

//Restart room
//Move to previous room
else if(keyboard_check_pressed(ord("C"))){

    //alarm[0]=2;
    fade=1;
    fade_alpha=1;
    scr_room_goto(room,10);
    obj_pause_controller.pause=0;
    //room_restart();
    message = "Room restarted!";
    cantalk=0;
    alarm[4]=90;
}

//Hitboxes
else if(keyboard_check_pressed(vk_numpad3)){
     debug_hitbox = !debug_hitbox;
     
     if(debug_hitbox){
     message = "Hitboxes ON!";
     }
     else{
     message = "Hitboxes OFF!";
     }
     cantalk=0;
     alarm[4]=90;
}

//Debug infos
else if(keyboard_check_pressed(vk_numpad2)){
     debug_info = !debug_info;
     
     if(debug_info){
     message = "Debug info ON!";
     }
     else{
     message = "Debug info OFF!";
     }
     cantalk=0;
     alarm[4]=90;
}

//Player debug
else if(keyboard_check_pressed(vk_numpad8)){
     if(instance_exists(obj_playerparent)){
     with(obj_playerparent){debug=!debug;
          if(debug){
          
          Movement=0;
          Vsp_final=0;
           Vsp=0;
           Vsp_super=0;
           hspeed=0;
           vspeed=0;
         Movement=0;
         SprintSpeed_final=0;
         Horizontal_mov=0;
         Non_volountary_mov=0;
         Sprint_movement=0;
         //cansprint=0;
          other.message="Player debug ON!";}
          
          else{ other.message="Player debug OFF!";}
     }
     
     alarm[4]=90;
     
     }
}

//Toggle debug text
else if(keyboard_check_pressed(vk_numpad1)){

    global.debug = !global.debug;
    
    if(global.debug){
       message = "Debug mode ON";
       instance_activate_object(obj_submenu); instance_activate_object(obj_menu_master);
    }
    else{
       message = "Debug mode OFF";
       instance_deactivate_object(obj_submenu); instance_deactivate_object(obj_menu_master); 
    }
    cantalk=0;
    alarm[4]=90;

}



//Coins
else if(keyboard_check(vk_numpad6)){
     global.coins[global.file]++;
}
else if(keyboard_check(vk_numpad4)){
     global.coins[global.file]--;
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Edit object variable


if(instance_exists(ObjectTag)){
   

         var i_d = ds_map_find_value(async_load, "id");
 if i_d == msg
    {
    if ds_map_find_value(async_load, "status")
       {
       if ds_map_find_value(async_load, "result") != ""
          {
          
            if(vartype==1){
             variable_instance_set(ObjectTag.id,arrayname,string(ds_map_find_value(async_load, "result")));
            }else if(vartype==0){
             variable_instance_set(ObjectTag.id,arrayname,real(ds_map_find_value(async_load, "result")));
            }
            else if(vartype==2){
            
             for(var a=0; a&lt;array_length_1d(arrayname); a++){
                 arrayname[a]=ds_map_find_value(async_load, "result");
             }
            
            }
          
          
          }
       }
 }     
 

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset keyboard inputs
   //Up 
   global.keyboard[input.up]   = noone//vk_up;
   
   //Down
   global.keyboard[input.down] = noone//vk_down;
   
   //Left
   global.keyboard[input.left] = noone//vk_left;
   
   //Right
   global.keyboard[input.right] = noone//vk_right;
   
   //Action 0 (jump)
   global.keyboard[input.action0] = noone//vk_space;
   
   //Action 1 (sprint)
   global.keyboard[input.action1] = noone//ord("W");
   
   //Action 2 (other action)
   global.keyboard[input.action2] = noone//ord("S");
   
   //Shoulder left
   global.keyboard[input.shoulder0] = noone//ord("Q");
   
   //Shoulder right
   global.keyboard[input.shoulder1] = noone//ord("E");
   
   //Start
   global.keyboard[input.start] = noone//vk_enter;
   
   //Select
   global.keyboard[input.select] = noone//vk_backspace;
   
   
   //Default controller inputs
   //Up
   global.button[input.up,0]   = gp_padu;
   
   //Down
   global.button[input.down,0] = gp_padd;
   
   //Left
   global.button[input.left,0] = gp_padl;
   
   //Right
   global.button[input.right,0] = gp_padr;
   
   //Action 0 (jump)
   global.button[input.action0,0] = gp_face1;
   
   //Action 1 (sprint)
   global.button[input.action1,0] = gp_face3;
   
   //Action 2 (other action)
   global.button[input.action2,0] = gp_face2;
   
   //Shoulder left
   global.button[input.shoulder0,0] = gp_shoulderl;
   
   //Shoulder right
   global.button[input.shoulder1,0] = gp_shoulderr;
   
   //Start
   global.button[input.start,0] = gp_start;
   
   //Select
   global.button[input.select,0] = gp_select;
   
   //-----------------------
   //Up
   global.button[input.up,1]   = 12;
   
   //Down
   global.button[input.down,1] = 13;
   
   //Left
   global.button[input.left,1] = 14;
   
   //Right
   global.button[input.right,1] = 15;
   
   //Action 0 (jump)
   global.button[input.action0,1] = 0;
   
   //Action 1 (sprint)
   global.button[input.action1,1] = 2;
   
   //Action 2 (other action)
   global.button[input.action2,1] = 1;
   
   //Shoulder left
   global.button[input.shoulder0,1] = 5;
   
   //Shoulder right
   global.button[input.shoulder1,1] = 4;
   
   //Start
   global.button[input.start,1] = 18;
   
   //Select
   global.button[input.select,1] = 17;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutscene bars
var W=display_get_gui_width();
var H=display_get_gui_height();

draw_set_alpha(0.7);
   draw_set_colour(c_black);
   //Bottom
   draw_rectangle(-1,H-Cut_Yoffset,
                  W+1,H+1,0);
                  
   //Top
   draw_rectangle(-1,-1,
                  W+1,Cut_Yoffset,0);
   
   draw_set_alpha(1);
   draw_set_colour(c_white);
   draw_set_font(global.dialogue_font);
   
   //Skip cutscene sign
   if(obj_controller.canskip){
      draw_set_halign(fa_right);
      draw_set_alpha(1);
      draw_set_colour(c_white);
      
      
      if(!global.inputmode){   
        draw_text_transformed(W-8,H-(Cut_Yoffset-32)-16,
        "Skip with '"+scr_key_to_string(global.keyboard[input.select])+"'",1.5/2,1.5/2,0);   
      }
      else{
        draw_text_transformed(W-8,
        H-(Cut_Yoffset-32)-16,
        "Skip with '"+scr_gamepad_to_string(global.button[input.select,global.weirdcontroller])+"'",1.5/2,1.5/2,0);
        
      }
      draw_set_halign(fa_left);
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove sprites
/*
if(global.cube_idle!=-1){

sprite_delete(global.cube_idle);
sprite_delete(global.cube_idle2);
sprite_delete(global.cube_idle3);
sprite_delete(global.cube_idle4);
sprite_delete(global.cube_jump);
sprite_delete(global.cube_pull);
sprite_delete(global.cube_sprint);
sprite_delete(global.cube_fall);
sprite_delete(global.cube_walk);
sprite_delete(global.cube_roll);
sprite_delete(global.cube_death);
sprite_delete(global.cube_crouch_idle);
sprite_delete(global.cube_crouch_walk);
sprite_delete(global.cube_crouch_sprint);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load costume
///Load cube costume
/*
ini_open("cube_idle.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",6));


global.cube_idle=sprite_add(
"cube_idle.png",frames,false,false,ini_read_string("Animation","Xorigin",32),
ini_read_string("Animation","Height",64)
);//

ini_close();


ini_open("cube_idle2.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",17));


global.cube_idle2=sprite_add(
"cube_idle2.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//

ini_close();


ini_open("cube_idle3.ini");
frames=real(ini_read_string("Animation","Frames",1));


global.cube_idle3=sprite_add(
"cube_idle3.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_idle4.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));
global.cubeloop=real(ini_read_string("Animation","Loopframe",0));


global.cube_idle4=sprite_add(
"cube_idle4.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_jump.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_jump=sprite_add(
"cube_jump.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();


ini_open("cube_pull.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_pull=sprite_add(
"cube_pull.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//

ini_close();


ini_open("cube_sprint.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_sprint=sprite_add(
"cube_sprint.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_fall.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_fall=sprite_add(
"cube_fall.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_walk.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));
global.cubestop=real(ini_read_string("Animation","Stopframe",4));


global.cube_walk=sprite_add(
"cube_walk.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_roll.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_roll=sprite_add(
"cube_roll.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_death.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_death=sprite_add(
"cube_death.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",32));//
ini_close();



ini_open("cube_crouch_idle.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_crouch_idle=sprite_add(
"cube_crouch_idle.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//
ini_close();



ini_open("cube_crouch_walk.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_crouch_walk=sprite_add(
"cube_crouch_walk.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));//

ini_close();


ini_open("cube_crouch_sprint.ini");
ini_write_string("Animation","ID",1);
frames=real(ini_read_string("Animation","Frames",1));


global.cube_crouch_sprint=sprite_add(
"cube_crouch_sprint.png",frames,false,false,ini_read_string("Animation","Xorigin",32),ini_read_string("Animation","Height",64));

ini_close();
//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set default control values
   //Up 
   global.keyboard[input.up]   = vk_up;
   
   //Down
   global.keyboard[input.down] = vk_down;
   
   //Left
   global.keyboard[input.left] = vk_left;
   
   //Right
   global.keyboard[input.right] = vk_right;
   
   //Action 0 (jump)
   global.keyboard[input.action0] = vk_space;
   
   //Action 1 (sprint)
   global.keyboard[input.action1] = ord("W");
   
   //Action 2 (other action)
   global.keyboard[input.action2] = ord("S");
   
   //Shoulder left
   global.keyboard[input.shoulder0] = ord("A");
   
   //Shoulder right
   global.keyboard[input.shoulder1] = ord("D");
   
   //Start
   global.keyboard[input.start] = vk_enter;
   
   //Select
   global.keyboard[input.select] = vk_backspace;
   
   
   //Default controller inputs
   //Up
   global.button[input.up,0]   = gp_padu;
   
   //Down
   global.button[input.down,0] = gp_padd;
   
   //Left
   global.button[input.left,0] = gp_padl;
   
   //Right
   global.button[input.right,0] = gp_padr;
   
   //Action 0 (jump)
   global.button[input.action0,0] = gp_face1;
   
   //Action 1 (sprint)
   global.button[input.action1,0] = gp_face3;
   
   //Action 2 (other action)
   global.button[input.action2,0] = gp_face2;
   
   //Shoulder left
   global.button[input.shoulder0,0] = gp_shoulderl;
   
   //Shoulder right
   global.button[input.shoulder1,0] = gp_shoulderr;
   
   //Start
   global.button[input.start,0] = gp_start;
   
   //Select
   global.button[input.select,0] = gp_select;
   
   //-----------------
   //Up
   global.button[input.up,1]   = 12;
   
   //Down
   global.button[input.down,1] = 14;
   
   //Left
   global.button[input.left,1] = 13;
   
   //Right
   global.button[input.right,1] = 15;
   
   //Action 0 (jump)
   global.button[input.action0,1] = 0;
   
   //Action 1 (sprint)
   global.button[input.action1,1] = 2;
   
   //Action 2 (other action)
   global.button[input.action2,1] = 1;
   
   //Shoulder left
   global.button[input.shoulder0,1] = 5;
   
   //Shoulder right
   global.button[input.shoulder1,1] = 4;
   
   //Start
   global.button[input.start,1] = 18;
   
   //Select
   global.button[input.select,1] = 17;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values
  //Visual----------------
 
  fps_show=0;
  
  //File number
  global.File_numb=-1;
  
  //Fullscreen
  fullscreen=0;

  //Window size
  Window_S=1;

  //vSync
  vSync=0;

  //Quality
  global.quality=0;

  //Effects
  global.effects=1;

  
  //Gameplay---------------

  //Speedrun mode
  speedrun_mode=0;

  //X axis
  global.Xaxis=1;

  //Yaxis
  global.Yaxis=1;

  //Deadzone
  global.Deadzone=0.5;

  //Auto crouch
  global.auto_crouch=0;

  //Dynamic jump
  global.Din_jump=1;

  
  //Audio and dialogue------------

  //Music volume
  music_V=0.3;

  //SFX volume
  sfx_V=0.5;

  //Master volume
  global.mastervolume=1;
  
  //Text speed
  global.Text_S=1;


  //HUD settings-------------

  //Show HUD
  global.show_HUD=1

  //Timer
  global.Timer=0;

  //Jump bar
  global.superjumpBAR=0;

  //Hide HUD on movement
  global.slide_HUD=1;
  
  //Jump arrow type
  global.jump_style=0;

  
  //Assist options-------------

  //Game speed
  global.game_speed=1;

  //Controller vibration
  global.contr_vibr=1;

  //Jumps
  global.max_jumps=1;

  //Give jumps
  global.givejumps=0;
  
  //Invincible
  global.invincible=0;


  //Others---------------------
  
  //First opened
  global.firstopen=0;

  //Global.file
  global.file=0;
  
  global.current_modcostume=0;

  //Latest file
  latestFile=0;
  
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values
obj_pause_controller.pause=0;
destination_id=-1;
fromroom        =0;
//Checkpoint variables
checkpointX     =0;
checkpointY     =0;
checkpointR     =rm_initialize;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set display

display_reset(global.quality,vSync);

window_set_size(Window_W*(Window_S+1), Window_H*(Window_S+1));

display_set_gui_size(Window_W, Window_H);
window_set_fullscreen(fullscreen);
//surface_resize(application_surface,window_get_width()/Window_W*(Window_S+1),window_get_height()/Window_H*(Window_S+1))
//view_wport[view_current]=Window_W*(Window_S+1);
//view_hport[view_current]=Window_H*(Window_S+1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(5);
//scr_save_file(global.file);
surface_free(surface_distort)

/*if(global.File_numb&gt;0){
   scr_save_filemap(global.file);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the parameters of the room

//5scr_load_costumes_all();


alarm[3]=4;
dis_icon="emerald";

sc_amt=0;
sc_dest=0;

music_T=music_V;
//Set the room speed
room_speed = 60*global.game_speed;

if(room==rm_title_screen){room_speed=60;}

if(!instance_exists(obj_key_controller)){
   instance_create(-32,-32,obj_key_controller);
}


//Stop the pause
pause=0;

//Can pause
canpause = 1;

//Reset fade
alarm[8]=5;


if(room==rm_initialize){
   //Go to the game
   //alarm[0]=110;

    if(global.firstopen){
       room_goto(rm_title_screen);
    }
    else{
       room_goto(rm_firstcontrols);
    }

    fade_alpha=1;
    fade=1;
    global.stream=-1;
    audio_stop_all();
}


instance_create(0,0,obj_menu_master);
instance_deactivate_object(obj_menu_master); 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save options

scr_free_costumes_all();

//scr_save_file(global.file);
//scr_save_files();

var file = file_text_open_write("RHsettings.dat");

//Version
file_text_write_string(file, game_version);
file_text_writeln(file);

//Visual----------------

//File number
file_text_write_string(file, string(global.File_numb));
file_text_writeln(file);

//Fullscreen
file_text_write_string(file, string(fullscreen));
file_text_writeln(file);

//Window size
file_text_write_string(file, string(Window_S));
file_text_writeln(file);

//vSync
file_text_write_string(file, string(vSync));
file_text_writeln(file);

//Quality
file_text_write_string(file, string(global.quality));
file_text_writeln(file);

//Effects
file_text_write_string(file, string(global.effects));
file_text_writeln(file);


//Gameplay---------------

//Speedrun mode
file_text_write_string(file, string(speedrun_mode));
file_text_writeln(file);

//X axis
file_text_write_string(file, string(global.Xaxis));
file_text_writeln(file);

//Yaxis
file_text_write_string(file, string(global.Yaxis));
file_text_writeln(file);

//Deadzone
file_text_write_string(file, string(global.Deadzone));
file_text_writeln(file);

//Auto crouch
file_text_write_string(file, string(global.auto_crouch));
file_text_writeln(file);

//Dynamic jump
file_text_write_string(file, string(global.Din_jump));
file_text_writeln(file);


//Audio and dialogue------------

//Music volume
file_text_write_string(file, string(music_V));
file_text_writeln(file);

//SFX volume
file_text_write_string(file, string(sfx_V));
file_text_writeln(file);

//Master volume
file_text_write_string(file, string(global.mastervolume));
file_text_writeln(file);

//Text speed
file_text_write_string(file, string(global.Text_S));
file_text_writeln(file);


//HUD settings-------------

//Show HUD
file_text_write_string(file, string(global.show_HUD));
file_text_writeln(file);

//Timer
file_text_write_string(file, string(global.Timer));
file_text_writeln(file);

//Jump bar
file_text_write_string(file, string(global.superjumpBAR));
file_text_writeln(file);

//Hide HUD on movement
file_text_write_string(file, string(global.slide_HUD));
file_text_writeln(file);

//Jump arrow type
file_text_write_string(file, string(global.jump_style));
file_text_writeln(file);


//Assist options-------------

//Game speed
file_text_write_string(file, string(global.game_speed));
file_text_writeln(file);

//Controller vibration
file_text_write_string(file, string(global.contr_vibr));
file_text_writeln(file);

//Jumps
file_text_write_string(file, string(global.max_jumps));
file_text_writeln(file);

//Given jumps
file_text_write_string(file, string(global.givejumps));
file_text_writeln(file);

//Invincible
file_text_write_string(file, string(global.invincible));
file_text_writeln(file);


//First opened
file_text_write_string(file, string(global.firstopen));
file_text_writeln(file);

//Global.file
file_text_write_string(file, string(global.file));
file_text_writeln(file);

//Latest file
file_text_write_string(file, string(latestFile));
file_text_writeln(file);

file_text_write_string(file, string(fps_show));
file_text_writeln(file);

file_text_write_string(file, string(global.current_modcostume));
file_text_writeln(file);

//Close the file
file_text_close(file);



//SAVE THE CONTROLS (they're in a separate menu now POG)

var file= file_text_open_write("RHcontrols.dat");

//Keyboard controls

//Up
file_text_write_string(file, string(global.keyboard[input.up]));
file_text_writeln(file);

//Down
file_text_write_string(file, string(global.keyboard[input.down]));
file_text_writeln(file);

//Left
file_text_write_string(file, string(global.keyboard[input.left]));
file_text_writeln(file);

//Right
file_text_write_string(file, string(global.keyboard[input.right]));
file_text_writeln(file);

//Action 0 (jump)
file_text_write_string(file, string(global.keyboard[input.action0]));
file_text_writeln(file);

//Action 1 (sprint)
file_text_write_string(file, string(global.keyboard[input.action1]));
file_text_writeln(file);

//Action 2 (other action)
file_text_write_string(file, string(global.keyboard[input.action2]));
file_text_writeln(file);

//Shoulder left
file_text_write_string(file, string(global.keyboard[input.shoulder0]));
file_text_writeln(file);

//Shoulder right
file_text_write_string(file, string(global.keyboard[input.shoulder1]));
file_text_writeln(file);

//Start
file_text_write_string(file, string(global.keyboard[input.start]));
file_text_writeln(file);

//Select
file_text_write_string(file, string(global.keyboard[input.select]));
file_text_writeln(file);

//Gamepad controls

var a=0;

//Up
file_text_write_string(file, string(global.button[input.up,0]));
file_text_writeln(file);

//Down
file_text_write_string(file, string(global.button[input.down,0]));
file_text_writeln(file);

//Left
file_text_write_string(file, string(global.button[input.left,0]));
file_text_writeln(file);

//Right
file_text_write_string(file, string(global.button[input.right,0]));
file_text_writeln(file);

//Action 0 (jump)
file_text_write_string(file, string(global.button[input.action0,0]));
file_text_writeln(file);

//Action 1 (sprint)
file_text_write_string(file, string(global.button[input.action1,0]));
file_text_writeln(file);

//Action 2 (other action)
file_text_write_string(file, string(global.button[input.action2,0]));
file_text_writeln(file);

//Shoulder left
file_text_write_string(file, string(global.button[input.shoulder0,0]));
file_text_writeln(file);

//Shoulder right
file_text_write_string(file, string(global.button[input.shoulder1,0]));
file_text_writeln(file);

//Start
file_text_write_string(file, string(global.button[input.start,0]));
file_text_writeln(file);

//Select
file_text_write_string(file, string(global.button[input.select,0]));
file_text_writeln(file);

//Up
file_text_write_string(file, string(global.button[input.up,1]));
file_text_writeln(file);

//Down
file_text_write_string(file, string(global.button[input.down,1]));
file_text_writeln(file);

//Left
file_text_write_string(file, string(global.button[input.left,1]));
file_text_writeln(file);

//Right
file_text_write_string(file, string(global.button[input.right,1]));
file_text_writeln(file);

//Action 0 (jump)
file_text_write_string(file, string(global.button[input.action0,1]));
file_text_writeln(file);

//Action 1 (sprint)
file_text_write_string(file, string(global.button[input.action1,1]));
file_text_writeln(file);

//Action 2 (other action)
file_text_write_string(file, string(global.button[input.action2,1]));
file_text_writeln(file);

//Shoulder left
file_text_write_string(file, string(global.button[input.shoulder0,1]));
file_text_writeln(file);

//Shoulder right
file_text_write_string(file, string(global.button[input.shoulder1,1]));
file_text_writeln(file);

//Start
file_text_write_string(file, string(global.button[input.start,1]));
file_text_writeln(file);

//Select
file_text_write_string(file, string(global.button[input.select,1]));
file_text_writeln(file);

file_text_close(file);


//scr_save_filemap(global.file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load data
global.cubeloop=0;

if(file_exists("RHsettings.dat")){

   var file=file_text_open_read("RHsettings.dat");
   
   var VERSION=string(file_text_read_string(file));
   file_text_readln(file);
   
   //This checjs if the version is the current one, but it's
   //really just used as a failsafe for beta users since the 
   //file stuff was rewritten.
   if(VERSION==game_version){
      
      
   
      //File number
      global.File_numb=real(file_text_read_string(file));
      file_text_readln(file);
      
      var i = 0;
      global.File_numb=0;
      
      var fileName = file_find_first(working_directory + "\Files\"+"*.sav",fa_directory);

        while(fileName != '')
        {
          fileName = file_find_next();
          i += 1;
          global.File_numb=i;
        }

        file_find_close();
      
      //Visual---------------
      
      //Fullscreen
      fullscreen=real(file_text_read_string(file));
      file_text_readln(file);
       
      //Window size
      Window_S=real(file_text_read_string(file));
      file_text_readln(file);
      
      //vSync
      vSync=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Quality
      global.quality=0//real(file_text_read_string(file));
      file_text_readln(file);
      
      ///Effects
      global.effects=real(file_text_read_string(file));
      file_text_readln(file);
      
      
      //Gameplay-------------
      
      //Speedrun
      speedrun_mode=real(file_text_read_string(file));
      file_text_readln(file);
      
      //X Axis
      global.Xaxis=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Y axis
      global.Yaxis=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Deadzone
      global.Deadzone=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Auto crouch
      global.auto_crouch=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Dynamic jump
      global.Din_jump=real(file_text_read_string(file));
      file_text_readln(file);
      
      
      //Audio and dialogue--------
      
      //Music volume
      music_V=real(file_text_read_string(file));
      file_text_readln(file);
      
      //SFX volume
      sfx_V=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Master volume        
      global.mastervolume=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Text speed
      global.Text_S=real(file_text_read_string(file));
      file_text_readln(file);
      
      
      //HUD settings------------
      
      //Show HUD
      global.show_HUD=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Timer
      global.Timer=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Jump bar
      global.superjumpBAR=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Hide HUD on movement
      global.slide_HUD=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Jump arrow type
      global.jump_style=real(file_text_read_string(file));
      file_text_readln(file);
      
      
      //Assist options-----------
      
      //Game speed
      global.game_speed=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Control vibration
      global.contr_vibr=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Jumps
      global.max_jumps=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Given jumps
      global.givejumps=real(file_text_read_string(file));
      file_text_readln(file);
      
      
      //Invincible
      global.invincible=real(file_text_read_string(file));
      file_text_readln(file);
       
      
      //First opened
      global.firstopen=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Global.file
      global.file=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Latest file
      latestFile=real(file_text_read_string(file));
      file_text_readln(file);
      
      //Show FPS
      fps_show=real(file_text_read_string(file));
      file_text_readln(file);
      
      global.current_modcostume=real(file_text_read_string(file));
      file_text_readln(file);
     
   
   }else{  event_user(2); }//Not in current version, so just use default values
   
   file_text_close(file);


}else{

  event_user(2);


}


//If the setting file exists
if(file_exists("RHcontrols.dat")){

   var file=file_text_open_read("RHcontrols.dat");

   //Default keyboard inputs
   //Up
   global.keyboard[input.up] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Down
   global.keyboard[input.down] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Left
   global.keyboard[input.left] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Right
   global.keyboard[input.right] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 0 (jump)
   global.keyboard[input.action0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 1 (sprint)
   global.keyboard[input.action1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 2 (other action)
   global.keyboard[input.action2] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Shoulder left
   global.keyboard[input.shoulder0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Shoulder right
   global.keyboard[input.shoulder1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Start
   global.keyboard[input.start] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Select
   global.keyboard[input.select] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
  var a=0;
   //Default keyboard inputs
   //Up
   global.button[input.up,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Down
   global.button[input.down,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Left
   global.button[input.left,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Right
   global.button[input.right,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 0 (jump)
   global.button[input.action0,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 1 (sprint)
   global.button[input.action1,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 2 (other action)
   global.button[input.action2,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Shoulder left
   global.button[input.shoulder0,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Shoulder right
   global.button[input.shoulder1,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Start
   global.button[input.start,0] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Select
   global.button[input.select,0] = real(file_text_read_string(file)); 
   
   
   //Up
   global.button[input.up,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Down
   global.button[input.down,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Left
   global.button[input.left,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Right
   global.button[input.right,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 0 (jump)
   global.button[input.action0,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 1 (sprint)
   global.button[input.action1,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Action 2 (other action)
   global.button[input.action2,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Shoulder left
   global.button[input.shoulder0,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Shoulder right
   global.button[input.shoulder1,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Start
   global.button[input.start,1] = real(file_text_read_string(file)); 
   file_text_readln(file);
   
   //Select
   global.button[input.select,1] = real(file_text_read_string(file)); 
   file_text_readln(file);   
   
   //Close the file
   file_text_close(file);
   
}
else{//Default
   
   //Default keyboard inputs
   //Up 
   global.keyboard[input.up]   = noone//vk_up;
   
   //Down
   global.keyboard[input.down] = noone//vk_down;
   
   //Left
   global.keyboard[input.left] = noone//vk_left;
   
   //Right
   global.keyboard[input.right] = noone//vk_right;
   
   //Action 0 (jump)
   global.keyboard[input.action0] = noone//vk_space;
   
   //Action 1 (sprint)
   global.keyboard[input.action1] = noone//ord("W");
   
   //Action 2 (other action)
   global.keyboard[input.action2] = noone//ord("S");
   
   //Shoulder left
   global.keyboard[input.shoulder0] = noone//ord("Q");
   
   //Shoulder right
   global.keyboard[input.shoulder1] = noone//ord("E");
   
   //Start
   global.keyboard[input.start] = noone//vk_enter;
   
   //Select
   global.keyboard[input.select] = noone//vk_backspace;
   
   
   //Default controller inputs
   //Up
   global.button[input.up,0]   = gp_padu;
   
   //Down
   global.button[input.down,0] = gp_padd;
   
   //Left
   global.button[input.left,0] = gp_padl;
   
   //Right
   global.button[input.right,0] = gp_padr;
   
   //Action 0 (jump)
   global.button[input.action0,0] = gp_face1;
   
   //Action 1 (sprint)
   global.button[input.action1,0] = gp_face3;
   
   //Action 2 (other action)
   global.button[input.action2,0] = gp_face2;
   
   //Shoulder left
   global.button[input.shoulder0,0] = gp_shoulderl;
   
   //Shoulder right
   global.button[input.shoulder1,0] = gp_shoulderr;
   
   //Start
   global.button[input.start,0] = gp_start;
   
   //Select
   global.button[input.select,0] = gp_select;
   
   //-----------------------
   //Up
   global.button[input.up,1]   = 12;
   
   //Down
   global.button[input.down,1] = 13;
   
   //Left
   global.button[input.left,1] = 14;
   
   //Right
   global.button[input.right,1] = 15;
   
   //Action 0 (jump)
   global.button[input.action0,1] = 0;
   
   //Action 1 (sprint)
   global.button[input.action1,1] = 2;
   
   //Action 2 (other action)
   global.button[input.action2,1] = 1;
   
   //Shoulder left
   global.button[input.shoulder0,1] = 5;
   
   //Shoulder right
   global.button[input.shoulder1,1] = 4;
   
   //Start
   global.button[input.start,1] = 18;
   
   //Select
   global.button[input.select,1] = 17;
   
}

global.datamap=ds_map_create();

if(global.File_numb&gt;0){
   scr_load_filemap(0);
   global.file=0;
}




for(var a=0; a&lt;gamepad_get_device_count(); a++){
    if(gamepad_is_connected(a)){
       gamepad_set_axis_deadzone(a,global.Deadzone);
    }
}

//Apply settings
alarm[5]=1;

//Set display
event_user(0);

//Go to the game
fade = 1;
fade_alpha=1;
alarm[2]=1;


   
if(!global.unshade){
 if(global.firstopen){
   Room_goto=rm_title_screen;
 }
 else{
   Room_goto=rm_firstcontrols;
 }
 
}else{ Room_goto=rm_shaderfail; } 
scr_load_costumes_all();
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw application surface

draw_set_alpha(1);
if(!surface_exists(surface_distort)){
surface_distort = surface_create(view_wview,view_hview);
}else{

surface_set_target(surface_distort)

    draw_clear_alpha(COLOUR_FOR_NO_MOVE,0)
    
    if(instance_exists(obj_wave)){
    draw_set_colour_write_enable(true,true,false,false)

    // Anything we draw here will distort the screen
    with(obj_wave){
    
   
    
    draw_sprite_ext(sprite_index,0,
    (x-view_xview)
    ,(y-view_yview),Scale,Scale,0,c_white,Alpha);
    
    }
   
    
    
    draw_set_colour_write_enable(true,true,1,1)
    
    }
    
surface_reset_target()

var surface_texture_page = surface_get_texture(surface_distort)

 if(!surface_exists(finalsurf)){ finalsurf=surface_create(view_wview,view_hview); }else{
 
    surface_set_target(finalsurf);  
     
     shader_set(shader_fullscreen);

     
     texture_set_stage(distortion_stage, surface_texture_page);
     
    
     

     draw_surface(application_surface,0,0);
    
     

     shader_reset();
     surface_reset_target();
     
     
     //Draw the final surface
     switch(Surface_state){
     
        case SurfaceState.blurH:
        
          shader_set(shd_gaussian_horizontal);
          shader_set_uniform_f(uni_resolution_hoz, var_resolution_x, var_resolution_y);
          shader_set_uniform_f(uni_blur_amount_hoz, var_blur_amount);
          
        break;
        
        case SurfaceState.blurV:
        
          shader_set(shd_gaussian_vertical);
          shader_set_uniform_f(uni_resolution_vert, var_resolution_x, var_resolution_y);
          shader_set_uniform_f(uni_blur_amount_vert, var_blur_amount);
          
        break;
        
        case SurfaceState.grayscale:
        
uni_time = shader_get_uniform(shd_grayscale,"time");
uni_greyscale_fade = shader_get_uniform(shd_grayscale,"fade");
uni_mouse_pos = shader_get_uniform(shd_grayscale,"mouse_pos");
uni_resolution = shader_get_uniform(shd_grayscale,"resolution");
var_greyscale_fade = 1;
var_time_var = 0;
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;
        
        
          shader_set(shd_grayscale);
          shader_set_uniform_f(uni_time_GRAY, var_time_var_GRAY);
          shader_set_uniform_f(uni_mouse_pos_GRAY, var_mouse_pos_x_GRAY, var_mouse_pos_y_GRAY);
          shader_set_uniform_f(uni_resolution_GRAY, var_resolution_x_GRAY, var_resolution_y_GRAY);
          shader_set_uniform_f(uni_greyscale_fade_GRAY, var_greyscale_fade_GRAY);
          
        break;
        
        
        case SurfaceState.invert:
        
uni_time = shader_get_uniform(shd_invert,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_invert,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_invert,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

          shader_set(shd_invert);
          shader_set_uniform_f(uni_time, var_time_var);
          shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
          shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
        
        break;
        
        
        case SurfaceState.scanlines:
        
        
uni_time = shader_get_uniform(shd_scanlines,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_scanlines,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_scanlines,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


        shader_set(shd_scanlines);
        shader_set_uniform_f(uni_time, var_time_var);
        shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
        shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
        
        break;
        
        
        
        case SurfaceState.scketh:
        
uni_time = shader_get_uniform(shd_sketch,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_sketch,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_sketch,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_intensity = shader_get_uniform(shd_sketch,"intensity");
var_intensity = 0.5;


         shader_set(shd_sketch);
         shader_set_uniform_f(uni_time, var_time_var);
         shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
         shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
         shader_set_uniform_f(uni_intensity, var_intensity);
        
        break;
        
        
        
        case SurfaceState.mosaic:
        
        uni_time = shader_get_uniform(shd_mosaic,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_mosaic,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_mosaic,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


          shader_set(shd_mosaic);
          shader_set_uniform_f(uni_time, var_time_var);
          shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
          shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
          shader_set_uniform_f(uni_pixel_amount, var_pixel_amount);
        
        break;
        
        
        
        case SurfaceState.emboss:
        
        uni_time = shader_get_uniform(shd_emboss,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_emboss,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_emboss,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


         shader_set(shd_emboss);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
        
        break;
        
        
        
        case SurfaceState.wave:
        
        uni_time = shader_get_uniform(shd_wave,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_wave,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_wave,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


        shader_set(shd_wave);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_wave_amount, var_wave_amount);
    shader_set_uniform_f(uni_wave_distortion, var_wave_distortion );
    shader_set_uniform_f(uni_wave_speed, var_wave_speed);
        
        
        break;
        
     }
     
     //------------------------//
     draw_set_blend_mode_ext(bm_one, bm_inv_src_alpha);
     
     draw_surface_stretched(finalsurf,0,0,window_get_width(),window_get_height());
     
     draw_set_blend_mode(bm_normal);
     
     shader_reset();
    
  }

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause and fade stuff

//Wave movement
wave = sin(wavetime*0.1)/2;
wavetime ++;

var W=display_get_gui_width();
var H=display_get_gui_height();

//Cutscene bars
if(global.cutscene){
   Cut_Yoffset=lerp(Cut_Yoffset,96/2,0.2); 
}
else{Cut_Yoffset=lerp(Cut_Yoffset,0,0.2);}

if(instance_exists(obj_pause_controller)){

   if(Cut_Yoffset!=0)&amp;&amp;(drawbars)&amp;&amp;(!obj_pause_controller.pause){
      event_user(6);
   }

}else{

   if(Cut_Yoffset!=0)&amp;&amp;(drawbars){
      event_user(6); 
   }

}

/*if(instance_exists(obj_player_death)){
if(circleScale&lt;5){circleScale+=0.5;}
}else{
if(circleScale&gt;0){circleScale-=1;}
}

if(circleScale&gt;0){

draw_sprite_ext(spr_lightmask,0,view_xview[view_current],view_yview[view_current],
circleScale+wave,circleScale+wave,0,c_red,0.75);
draw_sprite_ext(spr_lightmask,0,view_xview[view_current]+view_wview[view_current],view_yview[view_current],
circleScale+wave,circleScale+wave,0,c_red,0.75);
draw_sprite_ext(spr_lightmask,0,view_xview[view_current],view_yview[view_current]+view_hview[view_current],
circleScale+wave,circleScale+wave,0,c_red,0.75);
draw_sprite_ext(spr_lightmask,0,view_xview[view_current]+view_wview[view_current],view_yview[view_current]+view_hview[view_current],
circleScale+wave,circleScale+wave,0,c_red,0.75);

}*/
//Fade
/*if(fade){
   fade_alpha=scr_approach(fade_alpha,1,0.1);
}
else{
   fade_alpha=scr_approach(fade_alpha,0,0.05);
}*/

fade_alpha=scr_approach(fade_alpha,fade,0.1/(!fade+1));

draw_set_alpha(fade_alpha);

//Draw the black rectangle
draw_rectangle_colour(-8,-8,W+8,
H+8,c_black,c_black,c_black,c_black,false);

//Reset alpha
draw_set_alpha(1);



if(global.game_speed!=1)
||(global.max_jumps!=1)
||(global.invincible){

   draw_sprite_ext(spr_assist_sign,1,
   W-16,H-16,0.5,0.5,0,c_white,0.45);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display debug stuff
var W=display_get_gui_width();
var H=display_get_gui_height();

draw_set_font(global.dialogue_font);
draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_set_colour(c_white);
draw_set_alpha(0.2);
draw_set_colour(c_white);

//Display current version
draw_text_transformed(W-4,
8,string(version),0.25,0.25,0);
draw_set_alpha(1);

//FPS counter logic
draw_set_halign(fa_left);
if(fps_show)&amp;&amp;(cantalk){
   draw_rectangle_colour(6,H-1-string_height(message)/2-12,36,H-1-string_height(message)/2-2,c_red,c_green,c_green,c_red,0);
   draw_line(6+(fps/2),H-1-string_height(message)/2-12,6+(fps/2),H-1-string_height(message)/2-2);
   message="FPS:"+string(fps)+"/"+string(fps_real)+"#OBJ:"+string(instance_number(all));
}


//Display message
draw_set_font(global.outline_font);
draw_set_halign(fa_left);

draw_text_transformed(12,H-1-string_height(message)/2,message,1/2,1/2,0);



if(debug_info){

    draw_set_font(fnt_debug);

    //Player-----------------------------
    
    
   //Get the player's state
   if(instance_exists(obj_playerparent)){
   
      //Select player
      with(obj_playerparent){
           if(point_in_rectangle(mouse_x,mouse_y,bbox_left,bbox_top,bbox_right,bbox_bottom))&amp;&amp;(mouse_check_button_pressed(mb_left)){
              obj_controller.PlayerTag=id;
           }
      }
   }
   
   
   if(instance_exists(PlayerTag)){
   
      switch(PlayerTag.state){
             default: var PL="No state found"; break;
             case Playerstate.idle: var PL="Idle"; break;
             case Playerstate.move: var PL="Walking"; break;
             case Playerstate.jump: var PL="Jumping"; break;
             case Playerstate.fall: var PL="Falling"; break;
             case Playerstate.sprint: var PL="Dashing"; break;
             case Playerstate.groundpound: var PL="Groundpounding"; break;
      }
        
      if(PlayerTag.crouch){var CRO="YES";}else{var CRO="NO";}  
      if(PlayerTag.onfloor){var ONF="YES";}else{var ONF="NO";}
      if(PlayerTag.Animate){var ANIM="YES";}else{var ANIM="NO";}
      if(PlayerTag.Control){var CON="YES";}else{var CON="NO";}
        
      var STR="#Selected player ID: "+string(PlayerTag)+"#Players: "+string(instance_number(obj_playerparent))+
      "#X posiion: "+string(PlayerTag.x)+"#Y position: "+string(PlayerTag.y)+"#H speed: "+string(PlayerTag.hspeed)+
      "#V speed: "+string(PlayerTag.Vsp_final)+"#State :"+string(PL)+"#On floor: "+string(ONF)+"#Crouching: "+string(CRO)
      +"#Animate: "+string(ANIM)+" | Sprite: "+sprite_get_name(PlayerTag.sprite_index)+"#Control: "+string(CON)+
      "#Super jump meter: "+string(PlayerTag.superJump_level)+"%";
     
      
   }else{ var STR="#No player found.#Select an existing one by clicking on it.#Players: "+string(instance_number(obj_playerparent)); }

   var TITLE="Player information";

   scr_create_infotab(TITLE,STR,1,0.12,make_colour_rgb(255, 218,0));
   
   
   

     
   
   //General information page-----------
   
           
   var TITLE="General information";

   var STR=
   "#Rocket Hat v0.1.5c by Electro⚡#Made in Electro Rocket Engine v.1.0 (private RH)#Right click to close this window##FPS:"+string(fps)+"//REAL FPS:"+string(fps_real)+"#OBJECTS:"+string(instance_number(all))+
   "#Room: "+string(room_get_name(room))+"#Modded costumes: "+string(global.costume_number)+"#File: "+string(global.file)
   +"##CTRL+D - room menu#CTRL+A - sprites menu#CTRL+Z - next room#CTRL+X - previous room#CTRL+C - reload room#CTRL+R - restart game#CTRL+N - cycle cutscene state ("+string(global.cutscene)+"/2)"+
   "#CTRL+S - take screenshot#CTRL+F5 - smoother exit#CTRL+(1/2/3/4) - window size("+string(Window_S+1)+")#CTRL+Enter - fullscreen("+string(fullscreen)+")"+
   "#CTRL+num1 - degub mode("+string(global.debug)+")#CTRL+num2 - close this menu#CTRL+num3 - Hitboxes#CTRL+num4 - decrease moons#CTRL+num6 - add moons#CTRL+num8 - player debug";

   scr_create_infotab(TITLE,STR,0,0.12,make_colour_rgb(255, 218,0));
   
   
   //Object variable thing
   
   //Draw object nam when hovering on it
   Count=0;
   var PREH=0;
   with(all){
        if(point_in_rectangle(mouse_x,mouse_y,
        bbox_left,bbox_top,bbox_right,bbox_bottom)){
          
            var STR=object_get_name(object_index);
            var SIZE=0.12;
            
            other.Count++;
                        
            if(other.Count&gt;1){var FC=other.Count-1;}else{ var FC=1;}
            
            //Draw names
            for(var a=0; a&lt;FC; a++){
            
                /*if(a&gt;0){ */PREH-=string_height(STR)*SIZE; //}else{ PREH=0; }
            
                if(other.ObjectTag==id){draw_set_colour(c_green);}else{draw_set_colour(c_black);}
                draw_set_alpha(0.6);
               draw_rectangle(
                   device_mouse_x_to_gui(0)-1,
                   device_mouse_y_to_gui(0)-PREH,
                   device_mouse_x_to_gui(0)+string_width(STR)*SIZE,
                   device_mouse_y_to_gui(0)-string_height(STR)*SIZE-PREH,
               0);
            
               draw_set_alpha(1);
               draw_set_colour(c_white);
            
               draw_set_valign(fa_bottom);
               draw_set_halign(fa_left);
               draw_text_transformed(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)-PREH,STR,SIZE,SIZE,0);
            
            
            }
        
            if(mouse_check_button_pressed(mb_left)){
               other.ObjectTag=id; other.varYoff=0;
            }
            
        }
   }
   
   /*var TITLE="Object variables tab";
   
   //
   if(instance_exists(ObjectTag)){
   
   
      var array=variable_instance_get_names(ObjectTag);
    
      var STR="#Object name:"+string(object_get_name(ObjectTag.object_index))+"#Object ID: "+string(ObjectTag.id)
      
      for(var a=0; a&lt;array_length_1d(array); a++){
      
          if(A_Y[2]+string_height(STR)*0.12&lt;display_get_gui_height()){ 
          
             STR+="#"+array[a]+": "+string( variable_instance_get(ObjectTag.id,array[a]) ); 
             
          }
          
      }
      
      
   }else{ var STR="#No object selected.#Click on an existing one to select it."; }*/


}

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug hitboxes
if(debug_hitbox){
   with(all){
                       
     if(scr_inside_view(32)){
               
        if(object_is_ancestor(object_index,obj_semisolid))||(object_is_ancestor(object_index,obj_playerparent))
        ||(object_index==obj_checkpoint)||(object_is_ancestor(object_index,obj_slopeparent)){
           draw_set_colour(c_green);
        }
        else{
        
        if(variable_instance_exists(id,"Hitbox_color")){ draw_set_colour(Hitbox_color);} else{draw_set_colour(c_purple);}
        
        }
        
        draw_set_alpha(0.4);
        draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,0);
        
        draw_set_alpha(0.6);
        draw_set_colour(c_red);
        if(other.ObjectTag==id){
        draw_triangle(bbox_left,bbox_top,bbox_left,bbox_bottom,bbox_right,bbox_bottom,0);
        }
        
        draw_set_colour(c_yellow);
        draw_set_alpha(1);
        
        draw_line_width(bbox_left,bbox_top+0.5,bbox_right,bbox_top+0.5,2);
        
        draw_line_width(bbox_right-0.5,bbox_top,bbox_right-0.5,bbox_bottom,2);
        
        draw_line_width(bbox_left,bbox_bottom-0.5,bbox_right,bbox_bottom-0.5,2);
        
        draw_line_width(bbox_left+0.5,bbox_top,bbox_left+0.5,bbox_bottom,2);
        
        draw_set_colour(c_white);
        draw_set_font(global.dialogue_font);
        draw_set_halign(fa_center); draw_set_halign(fa_top);
        
        /*if(object_index!=obj_blodd_bubble)&amp;&amp;(object_index!=obj_effect){
        draw_text_transformed(
        bbox_left + (bbox_right-bbox_left)/2, bbox_top-8, object_get_name(object_index), 0.4,0.4,0);
        }*/
        
     }
        
   }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit the game

//game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
