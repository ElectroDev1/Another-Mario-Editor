<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

maxVsp=6;

Control=1;
state=0;

enum Playerstate {
    idle, idle2, walk, jump, fall, death
}


key_left=0;
key_right=0;
key_jump=0;
Dir=1;



walk_spd=2.5;


Angle=0;

jumpforce=6;
spinforce=6.2;

animate=1;

cayote_max=2;
cayote=cayote_max;

grav_O=0.3;
grav=grav_O;

controlmode=1;

INP=0;


run=0;
crouch=0;

runjump=0;
spinjump=0;

shaX=-4;
shaY=-4;
shaID=0;
alarm[0]=5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=5;

if(sign(Dir)!=0){ var IX=sign(Dir); }else{ var IX=1; }

if(shaX!=x || shaY!=y){
   with(instance_create(x,y,obj_mario_shadow)){
        sprite_index=other.sprite_index;
        image_index=other.image_index;
        image_xscale=other.image_xscale*IX;
        index=other.shaID;
   }
   
   shaID++;

   if(shaID&gt;=60){
      instance_activate_object(obj_mario_shadow);
      with(obj_mario_shadow){ if(index==0){instance_destroy();}else{index--;} }

   }

   instance_deactivate_object(obj_mario_shadow);
   
   
} 

shaX=x;
shaY=y; 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player logic

mask_index=spr_mario_idle;

if(Control){
   key_left = scr_input_check(input.left);
   key_right = scr_input_check(input.right);
   key_jump = scr_input_check_pressed(input.action0);
}

//Move
if(controlmode){

  if(crouch){ if(!onfloor){ INP = (key_right-key_left)/2; } }else{
     INP = key_right-key_left;
  }
  
  
  var T=scr_input_check_pressed(input.right) - scr_input_check_pressed(input.left)
  
  if(T!=0)&amp;&amp;(spd==0){
     if(Dir!=T){ Dir=T; }
  }

if(INP!=0){  Dir=scr_approach(Dir,sign(INP),0.25);;}

}else{
INP = Dir;
}





if(onfloor)
||(collision_line(x-2,bbox_bottom-16,x+2,bbox_bottom+10+Vsp,obj_slopeparent,0,0))
{ cayote=cayote_max; }else{
   if(cayote&gt;0){ cayote-=0.25; }
}


if(onfloor){runjump=0; spinjump=0;}


//Jump
if(key_jump){

   if(cayote&gt;0)&amp;&amp;(state!=Playerstate.jump)&amp;&amp;(!collision_rectangle(bbox_left,bbox_top-2,bbox_right,bbox_top+2,obj_solid,0,0)){
   
     if(!scr_input_check(input.up)){
      Vsp=-jumpforce;      
      if(spd&gt;3.5){runjump=1;}
     }
     else{
     
       Vsp-=spinforce;
       spinjump=1;
     
     }
      
      cayote=0;
   
   }

}



run=scr_input_check(input.action1);

if(crouch){ if(!onfloor){ spd=walk_spd*abs(INP);   }else{spd=scr_approach(spd,0,0.25);} 

}else{
 spd=scr_approach(spd, (walk_spd* ((0.5*run)+1) ) *abs(INP), 0.25);; 
}

event_inherited();

if(y&gt;=room_height+40){ 
   with(obj_editor_controller){
        event_perform(ev_keypress, vk_enter);
   }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State machine
if(state!=Playerstate.death){

 if(onfloor)
 ||
 (collision_line(x-2,bbox_bottom-16,x+2,bbox_bottom+10+Vsp,obj_slopeparent,0,0)
 ){

   if(hspeed==0){
   
      state=Playerstate.idle;
   
   }else{
   
      if(INP!=0){
      
         state=Playerstate.walk;
      
      }
   
   }
   
   if(scr_input_check(input.down)){ crouch=1; }
   
   
 }else{

   if(Vsp&lt;0){
   
      state=Playerstate.jump;
   
   }else if(Vsp&gt;0){
   
      state=Playerstate.fall;
   
   }else{ state=Playerstate.idle; }

 }
 
}


if(scr_input_check_released(input.down)){ crouch=0; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation logic
if(!animate){exit;}

if(!crouch){

 switch(state){

       case Playerstate.idle : 
         if(scr_input_check(input.up)){sprite_index=spr_mario_up;}else{sprite_index=spr_mario_idle;} break;
       case Playerstate.walk :
       
         if(sign(Dir)!=INP)&amp;&amp;(key_right || key_left){ sprite_index=spr_mario_skid; }else{
       
          if(!run){ sprite_index=spr_mario_walk; }else{ sprite_index=spr_mario_run; }
        
        }
        
         
           image_speed=.5; break;
           
           
       case Playerstate.fall :  if(spinjump){ sprite_index=spr_mario_spinjump;  }else{  if(runjump){sprite_index=spr_mario_jumprun;}else{sprite_index=spr_mario_fall;} }   break;
       
       case Playerstate.jump :  if(spinjump){ sprite_index=spr_mario_spinjump;  }else{  if(runjump){sprite_index=spr_mario_jumprun;}else{sprite_index=spr_mario_jump;} } break;
 
 }
 
 
}
else{

   sprite_index=spr_mario_crouch;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sign(Dir)!=0){ var IX=sign(Dir); }else{ var IX=1; }


draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),image_xscale*IX,image_yscale,Angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
