<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_solid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
w=0; wt=0;

Angle=0;

DrawSprite=1;
UsesSprite=-4;
image_speed=0;

//Id to use as reference in the map
Entity_id="Coin";

//Tile id
tile=-4;

alarm[0]=2;

//Tile width and height
width=16;
height=16;

child=-4;

//Special attributes
item=noone; //Item inside, used for container objects like blocks


Edited=0;

Attribute[Attributes.Mushroom]=false;
Attribute[Attributes.Wings]=false;
Attribute[Attributes.Direction]=0;
Attribute[Attributes.Parachute]=false;
Attribute[Attributes.Width]=1;
Attribute[Attributes.Height]=1;

//This value is used to check if the item was edited, useful to prevent unnecessary temp saves
prev_value=0;

//Delete if the space is occupied
if(collision_rectangle(bbox_left+1,bbox_top+1,bbox_right-1,bbox_bottom-1,obj_editor_entity,0,1)){instance_destroy();}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tile_exists(tile)){ tile_delete(tile); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_editor_controller){ event_user(2); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update tile
if(room==rm_editor){



if(tile_exists(tile)){tile_delete(tile);}

if(!UsesSprite){

 tile=tile_add(
 global.tileset,
 global.tileposX[? Entity_id],global.tileposY[? Entity_id],
 width,height,x,y,1);
 
}else{sprite_index=UsesSprite;}

   switch Entity_id {
        case "Firebar":
        case "Arrow":
        
             with(obj_editor_controller){enitityplace=0; selected_id=-1;}
        
        break;
   }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tile_exists(tile)){
   tile_set_position(tile,x+1,y+1);
}

wt++;
w=sin(wt*0.1);

Angle=scr_approach(Angle,Attribute[Attributes.Direction],5);

if(Angle&gt;=360){Angle-=360; Attribute[Attributes.Direction]-=360;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var select=position_meeting(mouse_x,mouse_y,id);

if(select){

   
        if(!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_editor_entity,0,1)){draw_set_colour(c_blue);}else{draw_set_colour(c_red);}
        draw_set_alpha(0.6);
        draw_rectangle(bbox_left+1,bbox_top+1,bbox_right+1,bbox_bottom+1,0);
        draw_set_alpha(1);
        draw_set_colour(c_white);

}



if(UsesSprite)&amp;&amp;(DrawSprite){
   sprite_index=UsesSprite;
   draw_sprite_ext(UsesSprite,image_index,x,y,image_xscale,image_yscale,Angle,c_white,1);
}


//Special behaviours
if(!global.closing){

switch(Entity_id){

       case "Arrow":
       
            draw_sprite_ext(spr_arrow_entity,0,x,y,
            1+0.2*w,1+0.2*w,Angle,c_white,1);
       
       break;
       
       
       case "Firebar":
       
            depth=-1;
            Attribute[Attributes.Width]=max(3,Attribute[Attributes.Width]);
            
            for(var a=0; a&lt;Attribute[Attributes.Width]; a++){
                draw_sprite(spr_firebar,0,
                x+9 + lengthdir_x(9*a, Attribute[Attributes.Direction]),
                y+9 + lengthdir_y(9*a, Attribute[Attributes.Direction]));
            }
            
            draw_sprite_ext(spr_extend_circle,0,
            x+9 + lengthdir_x(9*Attribute[Attributes.Width], Attribute[Attributes.Direction]),
            y+9 + lengthdir_y(9*Attribute[Attributes.Width], Attribute[Attributes.Direction]),
            1+0.2*w,1+0.2*w,0,c_white,1);
            
            if(point_in_circle(mouse_x,mouse_y,
            x+9 + lengthdir_x(9*Attribute[Attributes.Width], Attribute[Attributes.Direction]),
            y+9 + lengthdir_y(9*Attribute[Attributes.Width], Attribute[Attributes.Direction]),9)){
               if(mouse_check_button_pressed(mb_left)){ with(obj_editor_controller){enitityplace=0; selected_id=-1;} global.editing=1; Edited=1;  }
            }
            
            
            if(Edited){
            
               //Initialize circle collisions
               var collision_list=ds_map_create();
               
               for(var a=0; a&lt;Attribute[Attributes.Width]; a++){
                   ds_map_add(collision_list,string(a),
                   point_in_circle(mouse_x,mouse_y,
                   x+9 + lengthdir_x(9*a, Attribute[Attributes.Direction]),
                   y+9 + lengthdir_y(9*a, Attribute[Attributes.Direction]), 9+9*a ));
                   
                   draw_set_alpha(0.3);
                   
                   if(collision_list[? string(a)]){draw_set_colour(c_green);}else{draw_set_colour(c_red);}
                   draw_circle(x+9,y+9,9+9*a,0);
                   
                   draw_set_alpha(1);
                   
               }
               
               if(collision_list[? string(Attribute[Attributes.Width])]==0){  Attribute[Attributes.Width]++; with(obj_editor_controller){ event_user(2); } }
            
            }
       
       break;
       
       
       case "Bridge":
       
            Attribute[Attributes.Width]=max(3,Attribute[Attributes.Width]);
            DrawSprite=0;
            
            image_xscale=Attribute[Attributes.Width];
       
            for(var a=0; a&lt;image_xscale; a++){
    
            if(a==0){
    
              draw_sprite(spr_bridge_top,0,x+a*16,y-16);
              draw_sprite(spr_bridge_base,0,x+a*16,y);
              
              draw_sprite_ext(spr_extend_circle,0,x+a*16+8,y+8,1+0.2*w,1+0.2*w,Angle,c_white,1);
              
              //Drag to the left
              if(point_in_circle(mouse_x,mouse_y,x+a*16+8,y+8,9)){
                 if(mouse_check_button_pressed(mb_left)){ prev_value=Attribute[Attributes.Width]; global.editing=1; Edited=1; with(obj_editor_controller){enitityplace=0; selected_id=-1;} }
              }
       
           }else if(a&gt;=image_xscale-1){
    
              draw_sprite(spr_bridge_top,2,x+a*16,y-16);
              draw_sprite(spr_bridge_base,2,x+a*16,y);
              
              draw_sprite_ext(spr_extend_circle,0,x+a*16+8,y+8,1+0.2*w,1+0.2*w,Angle,c_white,1);
              
              //Drag to the left
              if(point_in_circle(mouse_x,mouse_y,x+a*16+8,y+8,9)){
                 if(mouse_check_button_pressed(mb_left)){ prev_value=Attribute[Attributes.Width]; global.editing=1; Edited=2; with(obj_editor_controller){enitityplace=0; selected_id=-1;} }
              }
       
           }
           else{
    
              draw_sprite(spr_bridge_top,0,x+a*16,y-16);
              draw_sprite(spr_bridge_base,0,x+a*16,y);
       
           }

         }
         
         if(Edited==1){ if(mouse_x&lt;bbox_left-6){ Attribute[Attributes.Width]++; x-=16; } 
                        if(mouse_x&gt;bbox_left+16+6)&amp;&amp;(Attribute[Attributes.Width]&gt;3){ Attribute[Attributes.Width]--; x+=16; }
         }
         
         if(Edited==2){ if(mouse_x&gt;bbox_right+6){ Attribute[Attributes.Width]++;} 
                        if(mouse_x&lt;bbox_right-16-6)&amp;&amp;(Attribute[Attributes.Width]&gt;3){ Attribute[Attributes.Width]--; }
         }
         
         //if(Edited &amp;&amp; mouse_check_button_released(mb_left)){ global.editing=0; }
       
       break;

}

}

if(mouse_check_button_released(mb_left))&amp;&amp;(Edited){ if(prev_value!=Attribute[Attributes.Width]){with(obj_editor_controller){event_user(2);}} global.editing=0; Edited=0; }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
