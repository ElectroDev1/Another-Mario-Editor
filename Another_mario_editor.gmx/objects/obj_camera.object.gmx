<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Object=obj_playerparent;
shake = 0; 
shakeV=0;
image_alpha=0;
SpeedH=0.125;
SpeedV=0.125;
XSPD=0;
YSPD=0;
canH=1;
canV=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera logic
visible=global.debug;


//Set the final position
view_xview = (round(-(view_wview[view_current]/2) + x)+obj_controller.ViewXoffset);
view_yview = (round(-(view_hview[view_current]/2) + y+32+8)+obj_controller.ViewYoffset); 

//Move to the object
if(instance_exists(Object)){
x=lerp(x,Object.x,SpeedH*canH);
y=lerp(y,Object.y-32,SpeedV*canV);
}

//Keep the camera at bay

//Up
if(view_yview[view_current]&lt;64){view_yview[view_current]+=8; view_yview[view_current]=64;}

//Left border
if(view_xview[view_current]&lt;0){
view_xview[view_current]+=8; view_xview[view_current]=0;}

//Right border
if(view_xview[view_current]&gt;room_width-view_wview[view_current]){
view_xview[view_current]=room_width-view_wview[view_current];}

//Down
if(view_yview[view_current]&gt;room_height-view_hview[view_current]+8){
view_yview[view_current]-=8; view_yview[view_current]=room_height-view_hview[view_current]+8;}


view_yview=min(view_yview,room_height-view_hview-8);

//Shake the view position
view_xview[view_current] += random_range(-shake,shake);
view_yview[view_current] += random_range(-shakeV,shakeV);

//Multiply shake
shake *= 0.9;
shakeV *=0.9;

XSPD=x-xprevious;
YSPD=y-yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
